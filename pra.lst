     1                                  ;Phase 5-Project
     2                                  ;Group Members:
     3                                  ;Amal Sarmad 22L-6676
     4                                  ;Wareesha Khawar 22L-6739
     5                                  
     6                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     7                                  [org 0x0100]
     8 00000000 E90D14                  jmp start
     9                                  
    10                                  
    11 00000003 0000                    esc_flag: dw 0
    12                                  
    13 00000005 00                      test: db 0
    14 00000006 00                      number: db 0
    15 00000007 00000000                oldtimer: dd 0
    16 0000000B 0000                    aniYes: dw 0
    17                                  
    18 0000000D 507265737320456E74-     m1: db 'Press Enter to Proceed' 
    18 00000016 657220746F2050726F-
    18 0000001F 63656564           
    19 00000023 4C6F6164696E672E2E-     m2: db 'Loading...'
    19 0000002C 2E                 
    20 0000002D 41726520796F752073-     m4: db 'Are you sure you want to leave the game?'
    20 00000036 75726520796F752077-
    20 0000003F 616E7420746F206C65-
    20 00000048 617665207468652067-
    20 00000051 616D653F           
    21 00000055 507265737320592066-     m3: db 'Press Y for Yes and N for No'
    21 0000005E 6F722059657320616E-
    21 00000067 64204E20666F72204E-
    21 00000070 6F                 
    22                                  
    23 00000071 312E50726573732055-     inst1: db '1.Press Up key to jump'
    23 0000007A 70206B657920746F20-
    23 00000083 6A756D70           
    24 00000087 322E436F6C6C656374-     inst2: db '2.Collect carrots for score'
    24 00000090 20636172726F747320-
    24 00000099 666F722073636F7265 
    25 000000A2 332E426C756520626C-     inst3: db '3.Blue blocks will break >:)'
    25 000000AB 6F636B732077696C6C-
    25 000000B4 20627265616B203E3A-
    25 000000BD 29                 
    26 000000BE 416D616C205361726D-     inst4: db'Amal Sarmad 22L-6676'
    26 000000C7 61642032324C2D3636-
    26 000000D0 3736               
    27 000000D2 576172656573686120-     inst5: db'Wareesha Khawar 22L-6739'
    27 000000DB 4B6861776172203232-
    27 000000E4 4C2D36373339       
    28                                  
    29 000000EA 51                      dela:      push cx
    30 000000EB B95555                  			mov cx, 0x5555
    31 000000EE E2FE                    d1:		loop d1
    32                                  	
    33 000000F0 59                      			pop cx
    34 000000F1 C3                      			ret
    35                                  
    36 000000F2 0000                    blue: dw 0
    37 000000F4 0000                    tickcount: dw 0
    38 000000F6 0000<rep 84h>           buffer1: times 132 dw 0
    39 000001FE 0000<rep 84h>           buffer2: times 132 dw 0
    40 00000306 0000<rep Eh>            vbuffer: times 14 dw 0
    41 00000322 582C                    totalcells: dw 11352
    42 00000324 2B00                    total_rows: dw 43
    43 00000326 8400                    total_col: dw 132
    44 00000328 0000                    divider1: dw 0
    45 0000032A 0000                    divider2: dw 0
    46 0000032C 00000000                oldisr: dd 0
    47                                  
    48 00000330 0000                    ans: dw 0
    49                                  
    50 00000332 7000                    rab_att: dw 0x70
    51                                  
    52 00000334 2800                    rab_x: dw 40
    53 00000336 4500                    rab_y: dw 69
    54 00000338 2900                    p1_x: dw 41
    55 0000033A 3E00                    p1_y: dw 62
    56 0000033C 4000                    p1_att: dw 0x40
    57 0000033E 1D00                    p2_x: dw 29
    58 00000340 3E00                    p2_y: dw 62
    59 00000342 2000                    p2_att: dw 0x20
    60 00000344 2300                    p3_x: dw 35
    61 00000346 3E00                    p3_y: dw 62
    62 00000348 3000                    p3_att: dw 0x30
    63                                  
    64 0000034A EE0E                    delayplatform: dw 0xEEE
    65                                  
    66 0000034C 2100                    carrot_x dw 33
    67 0000034E 3E00                    carrot_y: dw 62
    68                                  
    69 00000350 6000                    carr_collect1: dw 0x60
    70 00000352 2000                    carr_collect2: dw 0x20
    71 00000354 0000                    score: dw 0
    72 00000356 53636F72653A2000        message:db 'Score: ',0
    73 0000035E 5468652067616D6520-     endgame:db 'The game has ended :('
    73 00000367 68617320656E646564-
    73 00000370 203A28             
    74                                  
    75 00000373 0000                    rand: dw 0
    76                                  
    77                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    78                                  random_colour:
    79 00000375 50                      push ax
    80 00000376 53                      push bx
    81 00000377 51                      push cx
    82 00000378 52                      push dx
    83                                  
    84 00000379 C706[7303]0000          mov word [rand],0
    85                                  ;moves random number from system time in ax
    86 0000037F 0F31                    rdtsc
    87                                  
    88                                  randcheck:
    89                                  ;takes mod with 8
    90 00000381 31D2                    xor dx,dx
    91 00000383 BB0800                  mov bx,8
    92 00000386 F7F3                    div bx
    93 00000388 83FA00                  cmp dx,0 ;black
    94 0000038B 74F4                    je randcheck
    95 0000038D 83FA03                  cmp dx,3; cyan for blue block
    96 00000390 74EF                    je randcheck
    97 00000392 83FA07                  cmp dx,7 ;white
    98 00000395 74EA                    je randcheck
    99 00000397 83FA04                  cmp dx,4 ;red
   100 0000039A 74E5                    je randcheck
   101                                  
   102 0000039C 83FA01                  cmp dx,1
   103 0000039F 7508                    jne nextc1
   104 000003A1 C706[7303]1000          mov word [rand],0x10; dark blue
   105 000003A7 EB27                    jmp end_rand
   106                                  nextc1:
   107 000003A9 83FA02                  cmp dx,2
   108 000003AC 7508                    jne nextc2
   109 000003AE C706[7303]2000          mov word [rand],0x20; green
   110 000003B4 EB1A                    jmp end_rand
   111                                  nextc2:
   112 000003B6 83FA05                  cmp dx,5
   113 000003B9 7508                    jne nextc3
   114 000003BB C706[7303]5000          mov word [rand],0x50; magenta
   115 000003C1 EB0D                    jmp end_rand
   116                                  nextc3:
   117 000003C3 83FA06                  cmp dx,6
   118 000003C6 7508                    jne nextc4
   119 000003C8 C706[7303]6000          mov word [rand],0x60; orange
   120 000003CE EB00                    jmp end_rand
   121                                  
   122                                  nextc4:
   123                                  
   124                                  end_rand:
   125 000003D0 5A                      pop dx
   126 000003D1 59                      pop cx
   127 000003D2 5B                      pop bx
   128 000003D3 58                      pop ax 
   129 000003D4 C3                      ret
   130                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   131                                  random_carrotx:
   132 000003D5 50                      push ax
   133 000003D6 53                      push bx
   134 000003D7 51                      push cx
   135 000003D8 52                      push dx
   136                                  
   137                                  
   138                                  
   139                                  randloop:
   140                                  
   141                                  ;moves random number from system time in ax
   142 000003D9 0F31                    rdtsc
   143                                  
   144                                  ;takes mod with 6 
   145 000003DB 31D2                    xor dx,dx
   146 000003DD BB0600                  mov bx,6
   147 000003E0 F7F3                    div bx
   148                                  
   149 000003E2 83C21E                  add dx,30;range 30-35 inclusive
   150 000003E5 8916[7303]              mov [rand],dx
   151 000003E9 83FA21                  cmp dx,33 ;if position of platform is equal to random number,generate again
   152 000003EC 74EB                    je randloop
   153 000003EE 83FA23                  cmp dx,35;if position of platform is equal to random number,generate again
   154 000003F1 74E6                    je randloop
   155                                  
   156 000003F3 5A                      pop dx
   157 000003F4 59                      pop cx
   158 000003F5 5B                      pop bx
   159 000003F6 58                      pop ax 
   160 000003F7 C3                      ret
   161                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   162                                  random_carroty:
   163 000003F8 50                      push ax
   164 000003F9 53                      push bx
   165 000003FA 51                      push cx
   166 000003FB 52                      push dx
   167                                  
   168                                  ;moves random number from system time in ax
   169 000003FC 0F31                    rdtsc
   170                                  
   171                                  ;takes mod with 12 
   172 000003FE 31D2                    xor dx,dx
   173 00000400 BB0C00                  mov bx,12
   174 00000403 F7F3                    div bx
   175                                  
   176 00000405 83C237                  add dx,55;range 55-66 inclusive 55+11=66
   177 00000408 8916[7303]              mov [rand],dx
   178                                  
   179 0000040C 5A                      pop dx
   180 0000040D 59                      pop cx
   181 0000040E 5B                      pop bx
   182 0000040F 58                      pop ax 
   183 00000410 C3                      ret
   184                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   185                                  random_plat_y:
   186                                  
   187 00000411 50                      push ax
   188 00000412 53                      push bx
   189 00000413 51                      push cx
   190 00000414 52                      push dx
   191                                  
   192                                  ;moves random number from system time in ax
   193 00000415 0F31                    rdtsc
   194                                   
   195                                  ;takes mod with 9
   196 00000417 31D2                    xor dx,dx
   197 00000419 BB0900                  mov bx,9
   198 0000041C F7F3                    div bx
   199                                  
   200 0000041E 83C23A                  add dx,58;range 58-66 inclusive
   201 00000421 8916[7303]              mov [rand],dx
   202                                  
   203 00000425 5A                      pop dx
   204 00000426 59                      pop cx
   205 00000427 5B                      pop bx
   206 00000428 58                      pop ax 
   207 00000429 C3                      ret
   208                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   209                                  printnum_BIOS:
   210 0000042A 55                       push bp
   211 0000042B 89E5                     mov bp, sp
   212 0000042D 06                       push es
   213 0000042E 50                       push ax
   214 0000042F 53                       push bx
   215 00000430 51                       push cx
   216 00000431 52                       push dx
   217 00000432 57                       push di
   218 00000433 56                       push si
   219                                   
   220 00000434 B800B8                   mov ax, 0xb800
   221 00000437 8EC0                     mov es, ax ; point es to video base
   222 00000439 8B4604                   mov ax, [bp+4] ; load number in ax
   223 0000043C BB0A00                   mov bx, 10 ; use base 10 for division
   224 0000043F B90000                   mov cx, 0 ; initialize count of digits
   225                                   
   226 00000442 BF0000                   mov di,0
   227                                   
   228                                  nextdigit1:
   229 00000445 BA0000                   mov dx, 0 ; zero upper half of dividend
   230 00000448 F7F3                     div bx ; divide by 10
   231 0000044A 80C230                   add dl, 0x30 ; convert digit into ascii value
   232 0000044D 8895[0500]              mov [test+di],dl
   233 00000451 83C701                  add di,1
   234 00000454 41                       inc cx ; increment count of values
   235 00000455 83F800                   cmp ax, 0 ; is the quotient zero
   236 00000458 75EB                     jnz nextdigit1 ; if no divide it again
   237                                   
   238 0000045A 89F9                     mov cx,di
   239 0000045C BE0000                   mov si,0
   240 0000045F 4F                       dec di
   241                                   
   242                                   reverse:
   243 00000460 8A85[0500]               mov al,[test+di]
   244 00000464 8884[0600]               mov [number+si],al
   245 00000468 46                       inc si
   246 00000469 4F                       dec di
   247 0000046A 83FFFF                   cmp di,-1
   248 0000046D 75F1                     jne reverse
   249                                   
   250 0000046F BE1712                   mov si,0x1217
   251                                   
   252 00000472 B413                     mov ah, 0x13		; service 13 - print string
   253                                       
   254 00000474 BD[0600]                		mov bp, number ;offset of string
   255 00000477 B001                    		mov al, 1			
   256 00000479 B700                    		mov bh, 0			; output on page 0
   257                                  		;mov cx,3  string length
   258 0000047B B30F                    		mov bl, 0x0f ;colour
   259 0000047D 89F2                    		mov dx, si; row 10 column 3
   260                                  		
   261                                  		;es:bp = ds:message
   262 0000047F 1E                      		push ds
   263 00000480 07                      		pop es	
   264                                  		; es=ds segment of string
   265                                  		
   266                                  		
   267 00000481 CD10                    		INT 0x10
   268                                  
   269                                   
   270                                   byee:
   271 00000483 5E                       pop si
   272 00000484 5F                       pop di
   273 00000485 5A                       pop dx
   274 00000486 59                       pop cx
   275 00000487 5B                       pop bx
   276 00000488 58                       pop ax
   277 00000489 07                       pop es
   278 0000048A 5D                       pop bp
   279 0000048B C20200                   ret 2 
   280                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   281                                  offset_no:
   282 0000048E 55                      push bp
   283 0000048F 89E5                    mov bp,sp
   284 00000491 50                      push ax
   285 00000492 53                      push bx
   286                                  
   287 00000493 8B4604                  mov ax,[bp+4];row number
   288 00000496 8B1E[2603]              mov bx,[total_col]
   289                                  
   290 0000049A 31D2                    xor dx,dx
   291                                  
   292 0000049C F7E3                    mul bx
   293                                  
   294 0000049E 034606                  add ax,[bp+6];col number
   295 000004A1 D1E0                    shl ax,1
   296                                  
   297 000004A3 89C2                    mov dx,ax
   298                                  
   299 000004A5 5B                      pop bx
   300 000004A6 58                      pop ax
   301 000004A7 5D                      pop bp
   302 000004A8 C20400                  ret 4
   303                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   304                                  printnum:
   305 000004AB 55                       push bp
   306 000004AC 89E5                     mov bp, sp
   307 000004AE 06                       push es
   308 000004AF 50                       push ax
   309 000004B0 53                       push bx
   310 000004B1 51                       push cx
   311 000004B2 52                       push dx
   312 000004B3 57                       push di
   313 000004B4 B800B8                   mov ax, 0xb800
   314 000004B7 8EC0                     mov es, ax ; point es to video base
   315 000004B9 8B4604                   mov ax, [bp+4] ; load number in ax
   316 000004BC BB0A00                   mov bx, 10 ; use base 10 for division
   317 000004BF B90000                   mov cx, 0 ; initialize count of digits
   318 000004C2 BA0000                  nextdigit: mov dx, 0 ; zero upper half of dividend
   319 000004C5 F7F3                     div bx ; divide by 10
   320 000004C7 80C230                   add dl, 0x30 ; convert digit into ascii value
   321 000004CA 52                       push dx ; save ascii value on stack
   322 000004CB 41                       inc cx ; increment count of values
   323 000004CC 83F800                   cmp ax, 0 ; is the quotient zero
   324 000004CF 75F1                     jnz nextdigit ; if no divide it again
   325 000004D1 BFE61E                   mov di, 7910 ; point di to top left column
   326 000004D4 5A                       nextpos: pop dx ; remove a digit from the stack
   327 000004D5 B607                     mov dh, 0x07 ; use normal attribute
   328 000004D7 268915                   mov [es:di], dx ; print char on screen
   329 000004DA 83C702                   add di, 2 ; move to next screen location
   330 000004DD E2F5                     loop nextpos ; repeat for all digits on stack
   331 000004DF 5F                       pop di
   332 000004E0 5A                       pop dx
   333 000004E1 59                       pop cx
   334 000004E2 5B                       pop bx
   335 000004E3 58                       pop ax
   336 000004E4 07                       pop es
   337 000004E5 5D                       pop bp
   338 000004E6 C20200                   ret 2 
   339                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   340                                  strlen:
   341 000004E9 55                       push bp
   342 000004EA 89E5                     mov bp,sp
   343 000004EC 06                       push es
   344 000004ED 51                       push cx
   345 000004EE 57                       push di
   346 000004EF C47E04                   les di, [bp+4] ; point es:di to string
   347 000004F2 B9FFFF                   mov cx, 0xffff ; load maximum number in cx
   348 000004F5 30C0                     xor al, al ; load a zero in al
   349 000004F7 F2AE                     repne scasb ; find zero in the string
   350 000004F9 B8FFFF                   mov ax, 0xffff ; load maximum number in ax
   351 000004FC 29C8                     sub ax, cx ; find change in cx
   352 000004FE 48                       dec ax ; exclude null from length
   353 000004FF 5F                       pop di
   354 00000500 59                       pop cx
   355 00000501 07                       pop es
   356 00000502 5D                       pop bp
   357 00000503 C20400                   ret 4
   358                                  ;----------------------------------------------------------------------------------------------------------------------------------------------------------
   359                                  printscore:
   360 00000506 55                      push bp
   361 00000507 89E5                     mov bp, sp
   362 00000509 06                       push es
   363 0000050A 50                       push ax
   364 0000050B 51                       push cx
   365 0000050C 56                       push si
   366 0000050D 57                       push di
   367                                    
   368 0000050E B800B8                   mov ax, 0xb800
   369 00000511 8EC0                     mov es, ax ; point es to video base
   370                                   
   371 00000513 B88400                   mov ax, 132 ; load al with columns per row
   372 00000516 F76608                   mul word [bp+8] ; multiply with y position
   373 00000519 03460A                   add ax, [bp+10] ; add x position
   374 0000051C D1E0                     shl ax, 1 ; turn into byte offset
   375                                   
   376 0000051E 89C7                     mov di,ax ; point di to required location
   377 00000520 8B7604                   mov si, [bp+4] ; point si to string
   378 00000523 8A6606                   mov ah, [bp+6] ; load attribute in ah
   379                                  
   380 00000526 B90700                  mov cx,7
   381                                    
   382                                  nextchar1:
   383 00000529 3E8A04                  mov al,[ds:si]
   384 0000052C 268905                  mov [es:di],ax
   385 0000052F 83C601                  add si,1
   386 00000532 83C702                  add di,2
   387 00000535 E2F2                     loop nextchar1 ; repeat for the whole string
   388                                   
   389                                  
   390 00000537 5F                      pop di
   391 00000538 5E                       pop si
   392 00000539 59                       pop cx
   393 0000053A 58                       pop ax
   394 0000053B 07                       pop es
   395 0000053C 5D                       pop bp
   396 0000053D C20800                   ret 8 
   397                                  
   398                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   399                                  
   400                                  playAnimation:
   401 00000540 E89F00                  call ShiftLeft
   402 00000543 E82500                  call ShiftRight
   403 00000546 C3                      ret
   404                                  ;------------------------------------------------------------------------------------------------------------------------------
   405 00000547 51                      delayplat:      push cx
   406 00000548 8B0E[4A03]              			mov cx, [delayplatform]
   407 0000054C E2FE                    de1:		loop de1
   408 0000054E 8B0E[4A03]              			mov cx, [delayplatform]
   409 00000552 E2FE                     de2:		loop de2
   410 00000554 59                      			pop cx
   411 00000555 C3                      			ret
   412                                  ;------------------------------------------------------------------------------------------------------------------------------
   413 00000556 51                      delay:      push cx
   414 00000557 B9FFFF                  			mov cx, 0xFFFF
   415 0000055A E2FE                    del1:		loop del1
   416 0000055C B9FFFF                  			mov cx, 0xFFFF
   417 0000055F E2FE                     del2:		loop del2
   418 00000561 59                      			pop cx
   419 00000562 C3                      			ret
   420                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
   421 00000563 51                      delay1:      push cx
   422 00000564 B9FFFF                  			mov cx, 0xFFFF
   423 00000567 E2FE                    del11:		loop del11
   424 00000569 59                      			pop cx
   425 0000056A C3                      			ret
   426                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   427                                  ShiftRight:
   428 0000056B 06                      push es
   429 0000056C 1E                      push ds
   430 0000056D 55                      push bp
   431 0000056E 50                      push ax
   432 0000056F 53                      push bx
   433 00000570 51                      push cx
   434 00000571 52                      push dx
   435 00000572 57                      push di
   436 00000573 56                      push si
   437 00000574 1E                      push ds
   438                                  
   439 00000575 B800B8                  mov ax,0xb800
   440 00000578 8EC0                    mov es,ax
   441                                  
   442                                  
   443 0000057A B90E00                  mov cx,14
   444 0000057D BE0601                  mov si,262
   445 00000580 BF0000                  mov di,0
   446                                  
   447                                  copying:
   448 00000583 268B04                  mov ax,[es:si]
   449 00000586 8985[0603]              mov [vbuffer+di],ax
   450 0000058A 81C60801                add si,264
   451 0000058E 83C702                  add di,2
   452 00000591 E2F0                    loop copying
   453                                  
   454                                  
   455 00000593 BA0E00                  mov dx,14
   456 00000596 8CC0                    mov ax,es
   457 00000598 1E                      push ds
   458 00000599 8ED8                    mov ds,ax
   459 0000059B BF0601                  mov di,262
   460 0000059E BE0401                  mov si,260
   461                                  
   462 000005A1 BD0601                  mov bp,262
   463 000005A4 BB0401                  mov bx,260
   464                                  
   465                                  outerR:
   466 000005A7 B98400                  mov cx,132
   467                                  
   468 000005AA 89DE                    mov si,bx
   469 000005AC 89EF                    mov di,bp
   470                                  
   471                                  innerR:
   472 000005AE FD                      std
   473 000005AF A5                      movsw
   474 000005B0 E2FC                    loop innerR
   475                                  
   476 000005B2 81C30801                add bx,264
   477 000005B6 81C50801                add bp,264
   478 000005BA 4A                      dec dx
   479 000005BB 75EA                    jnz outerR
   480                                  
   481 000005BD 1F                      pop ds
   482                                  
   483 000005BE B90E00                  mov cx,14
   484 000005C1 BE0000                  mov si,0
   485 000005C4 BF0000                  mov di,0
   486                                  
   487                                  pasting:
   488 000005C7 8B85[0603]              mov ax,[vbuffer+di]
   489 000005CB 268904                  mov [es:si],ax
   490 000005CE 81C60801                add si,264
   491 000005D2 83C702                  add di,2
   492 000005D5 E2F0                    loop pasting
   493                                  
   494                                  
   495                                  	 
   496 000005D7 1F                      pop ds
   497 000005D8 5E                      pop si
   498 000005D9 5F                      pop di
   499 000005DA 5A                      pop dx
   500 000005DB 59                      pop cx
   501 000005DC 5B                      pop bx
   502 000005DD 58                      pop ax
   503 000005DE 5D                      pop bp
   504 000005DF 1F                      pop ds
   505 000005E0 07                      pop es
   506 000005E1 C3                      ret
   507                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------
   508                                  ShiftLeft:
   509 000005E2 50                      push ax
   510 000005E3 53                      push bx
   511 000005E4 51                      push cx
   512 000005E5 52                      push dx
   513 000005E6 57                      push di
   514 000005E7 56                      push si
   515 000005E8 06                      push es
   516 000005E9 55                      push bp
   517 000005EA 1E                      push ds
   518                                  
   519 000005EB B800B8                   mov ax,0xb800
   520 000005EE 8EC0                     mov es,ax
   521                                   
   522 000005F0 B90E00                   mov cx,14
   523 000005F3 BE780F                  mov si,3960
   524 000005F6 BF0000                  mov di,0
   525                                  
   526                                  copying1:
   527 000005F9 268B04                  mov ax,[es:si]
   528 000005FC 8985[0603]              mov [vbuffer+di],ax
   529 00000600 81C60801                add si,264
   530 00000604 83C702                  add di,2
   531 00000607 E2F0                    loop copying1
   532                                   
   533                                   
   534                                  
   535 00000609 BA0E00                  mov dx,14
   536 0000060C 8CC0                    mov ax,es
   537 0000060E 1E                      push ds
   538 0000060F 8ED8                    mov ds,ax
   539 00000611 BF780F                  mov di,3960
   540 00000614 BE7A0F                  mov si,3962
   541                                  
   542 00000617 BD780F                  mov bp,3960
   543 0000061A BB7A0F                  mov bx,3962
   544                                  
   545                                  outerL:
   546 0000061D B98300                  mov cx,131
   547                                  
   548 00000620 89DE                    mov si,bx
   549 00000622 89EF                    mov di,bp
   550                                  
   551                                  innerL:
   552 00000624 FC                      cld
   553 00000625 A5                      movsw
   554 00000626 E2FC                    loop innerL
   555                                  
   556 00000628 81C30801                add bx,264
   557 0000062C 81C50801                add bp,264
   558 00000630 4A                      dec dx
   559 00000631 75EA                    jnz outerL
   560                                  
   561 00000633 1F                      pop ds
   562                                   
   563                                   
   564 00000634 B90E00                  mov cx,14
   565 00000637 BE7E10                  mov si,4222
   566 0000063A BF0000                  mov di,0
   567                                  
   568                                  pasting1:
   569 0000063D 8B85[0603]              mov ax,[vbuffer+di]
   570 00000641 268904                  mov [es:si],ax
   571 00000644 81C60801                add si,264
   572 00000648 83C702                  add di,2
   573 0000064B E2F0                    loop pasting1
   574                                  
   575 0000064D 1F                      pop ds 
   576 0000064E 5D                      pop bp
   577 0000064F 07                      pop es
   578 00000650 5E                      pop si
   579 00000651 5F                      pop di
   580 00000652 5A                      pop dx
   581 00000653 59                      pop cx
   582 00000654 5B                      pop bx
   583 00000655 58                      pop ax
   584 00000656 C3                      ret
   585                                  
   586                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   587                                  drawTrees:
   588 00000657 55                          push bp
   589 00000658 89E5                        mov bp,sp
   590 0000065A 50                          push ax
   591 0000065B 8B4604                  	mov ax,[bp+4]
   592                                  	
   593 0000065E 6A40                    	push 0x40
   594 00000660 6A02                    	push 0x2
   595 00000662 6A02                    	push 0x2
   596 00000664 50                      	push ax
   597 00000665 E87F00                  	call drawRectangle
   598                                  	
   599 00000668 8B4604                  	mov ax,[bp+4]
   600 0000066B 2D0E01                  	sub ax,270
   601                                  	
   602 0000066E 6A20                    	push 0x20
   603 00000670 6A08                    	push 0x8
   604 00000672 6A01                    	push 0x1
   605 00000674 50                      	push ax
   606 00000675 E86F00                  	call drawRectangle
   607                                  	
   608 00000678 8B4604                  	mov ax,[bp+4]
   609 0000067B 2D1402                  	sub ax,532
   610                                  	
   611 0000067E 6A20                    	push 0x20
   612 00000680 6A06                    	push 0x6
   613 00000682 6A01                    	push 0x1
   614 00000684 50                      	push ax
   615 00000685 E85F00                  	call drawRectangle
   616                                  	
   617 00000688 8B4604                  	mov ax,[bp+4]
   618 0000068B 2D1A03                  	sub ax,794
   619                                  	
   620 0000068E 6A20                    	push 0x20
   621 00000690 6A04                    	push 0x4
   622 00000692 6A01                    	push 0x1
   623 00000694 50                      	push ax
   624 00000695 E84F00                  	call drawRectangle
   625                                  		
   626 00000698 58                      	pop ax	
   627 00000699 89EC                    	mov sp,bp
   628 0000069B 5D                      	pop bp
   629 0000069C C20200                  	ret 2
   630                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   631                                  
   632                                  drawBoat:
   633 0000069F 55                      		push bp
   634 000006A0 89E5                    		mov bp,sp
   635 000006A2 50                      		push ax
   636                                  ;starting offset for boat parameter
   637 000006A3 8B4604                  		mov ax,[bp+4]
   638                                  
   639 000006A6 6A60                    		push 0x60    ;color
   640 000006A8 6A10                    		push 0x10    ;width
   641 000006AA 6A02                    		push 0x2     ;length
   642 000006AC 50                      		push ax
   643                                  
   644 000006AD E83700                  		call drawRectangle
   645                                  
   646 000006B0 8B4604                  		mov ax,[bp+4]
   647 000006B3 2D1201                  		sub ax,274
   648                                  
   649 000006B6 6A60                    		push 0x60
   650 000006B8 6A19                    		push 0x19
   651 000006BA 6A01                    		push 0x1
   652 000006BC 50                      		push ax
   653                                  
   654 000006BD E82700                  		call drawRectangle
   655                                  
   656 000006C0 8B4604                  		mov ax,[bp+4]
   657 000006C3 2D0C04                  		sub ax,1036
   658                                  
   659 000006C6 6A70                    		push 0x70
   660 000006C8 6A01                    		push 0x1
   661 000006CA 6A03                    		push 0x3
   662 000006CC 50                      		push ax
   663                                  
   664 000006CD E81700                  		call drawRectangle
   665                                  
   666 000006D0 8B4604                  		mov ax,[bp+4]
   667 000006D3 2D0A04                  		sub ax,1034
   668                                  
   669 000006D6 6A40                    		push 0x40
   670 000006D8 6A04                    		push 0x4
   671 000006DA 6A02                    		push 0x2
   672 000006DC 50                      		push ax
   673                                  
   674 000006DD E80700                  		call drawRectangle
   675                                  
   676 000006E0 58                      		pop ax
   677 000006E1 89EC                    		mov sp,bp
   678 000006E3 5D                      		pop bp
   679 000006E4 C20200                  		ret 2
   680                                  
   681                                  
   682                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   683                                  drawRectangle:
   684 000006E7 55                      		push bp
   685 000006E8 89E5                    		mov bp,sp
   686 000006EA 83EC02                  		sub sp,2
   687 000006ED 57                      		push di
   688 000006EE 56                      		push si
   689 000006EF 50                      		push ax
   690 000006F0 53                      		push bx
   691 000006F1 51                      		push cx
   692 000006F2 52                      		push dx
   693 000006F3 06                      		push es
   694                                  ;point to set video
   695 000006F4 B800B8                  		mov ax,0xb800
   696 000006F7 8EC0                    		mov es,ax
   697                                  
   698 000006F9 8B7E04                  		mov di,[bp+4] ;starting position
   699 000006FC 8B4606                  		mov ax,[bp+6] ;length
   700 000006FF 8946FE                  		mov [bp-2],ax
   701 00000702 8B5E08                  		mov bx,[bp+8] ;width
   702                                  
   703                                  
   704 00000705 8B56FE                  		mov dx,[bp-2];length
   705                                  
   706 00000708 8A660A                  		mov ah,[bp+10];colour
   707 0000070B B020                    		mov al,0x20
   708                                  
   709                                  		outer:
   710 0000070D 89D9                    		 mov cx,bx
   711 0000070F 89FE                    		 mov si,di
   712                                  
   713                                  		 inner:
   714 00000711 268904                  		  mov [es:si],ax
   715 00000714 83C602                  		  add si,2
   716 00000717 49                      		  dec cx
   717 00000718 75F7                    		  jnz inner
   718                                  
   719 0000071A 033E[2603]              		 add di,[total_col]
   720 0000071E 033E[2603]              		 add di,[total_col]
   721                                  
   722 00000722 4A                      		 dec dx
   723 00000723 75E8                    		jnz outer
   724                                  
   725 00000725 07                      		pop es
   726 00000726 5A                      		pop dx
   727 00000727 59                      		pop cx
   728 00000728 5B                      		pop bx
   729 00000729 58                      		pop ax
   730 0000072A 5E                      		pop si
   731 0000072B 5F                      		pop di
   732 0000072C 83C402                  		add sp,2
   733 0000072F 89EC                    		mov sp,bp
   734 00000731 5D                      		pop bp 
   735 00000732 C20800                  		ret 8
   736                                  
   737                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
   738                                  drawBuilding:
   739 00000735 55                      		push bp
   740 00000736 89E5                    		mov bp,sp
   741 00000738 83EC04                  		sub sp,4
   742 0000073B 06                      		push es
   743 0000073C 50                      		push ax
   744 0000073D 53                      		push bx
   745 0000073E 51                      		push cx
   746 0000073F 52                      		push dx
   747 00000740 56                      		push si
   748 00000741 57                      		push di
   749                                  
   750 00000742 FF760A                  		push word [bp+10]
   751 00000745 FF7608                  		push word [bp+8]
   752 00000748 FF7606                  		push word [bp+6]
   753 0000074B FF7604                  		push word [bp+4]
   754                                  
   755 0000074E E896FF                  		call drawRectangle
   756                                  
   757 00000751 8B4608                  		mov ax,[bp+8];width
   758 00000754 BB0300                  		mov bx,3
   759 00000757 BA0000                  		mov dx,0
   760 0000075A F7F3                    		div bx
   761 0000075C 83E801                  		sub ax,1
   762                                  
   763 0000075F 8946FE                  		mov [bp-2],ax ;column space for  windows
   764                                  
   765 00000762 8B4606                  		mov ax,[bp+6];length
   766 00000765 BB0300                  		mov bx,3
   767 00000768 BA0000                  		mov dx,0
   768 0000076B F7F3                    		div bx
   769                                  
   770                                  
   771 0000076D 8946FC                  		mov [bp-4],ax ;row space for  windows
   772                                  
   773 00000770 8B7E04                  		mov di,[bp+4]
   774                                  
   775 00000773 8B4EFC                  		mov cx,[bp-4]
   776 00000776 8B56FE                  		mov dx,[bp-2]
   777 00000779 8B5E0E                  		mov bx,[bp+14]
   778                                  
   779 0000077C 033E[2603]              		add di,[total_col]
   780 00000780 033E[2603]              		add di,[total_col]
   781                                  
   782                                  		outer1:;increment row
   783 00000784 8B460C                  		 mov ax,[bp+12]
   784 00000787 89FE                    		 mov si,di
   785                                  		 inner1:;increment column
   786 00000789 8B56FE                  			mov dx,[bp-2]
   787                                  			
   788                                  			k:
   789 0000078C 83C602                  			 add si,2
   790 0000078F 4A                      			 dec dx
   791 00000790 75FA                    			jnz k
   792                                  
   793 00000792 6A70                    			push 0x70
   794 00000794 6A01                    			push 1
   795 00000796 6A01                    			push 1
   796 00000798 56                      			push si
   797 00000799 E84BFF                  			call drawRectangle
   798 0000079C 48                      			dec ax
   799 0000079D 75EA                    			jnz inner1
   800                                  			
   801 0000079F 8B4EFC                  		 mov cx,[bp-4]
   802                                  		 w:
   803 000007A2 033E[2603]              		  add di,[total_col]
   804 000007A6 033E[2603]              		  add di,[total_col]
   805 000007AA 49                      		  dec cx
   806 000007AB 75F5                    		 jnz w 
   807                                  
   808 000007AD 4B                      		 dec bx
   809 000007AE 75D4                    		jnz outer1
   810                                  
   811                                  
   812 000007B0 5F                      		pop di
   813 000007B1 5E                      		pop si
   814 000007B2 5A                      		pop dx
   815 000007B3 59                      		pop cx
   816 000007B4 5B                      		pop bx
   817 000007B5 58                      		pop ax
   818 000007B6 07                      		pop es
   819 000007B7 83C404                  		add sp,4
   820 000007BA 89EC                    		mov sp,bp
   821 000007BC 5D                      		pop bp
   822 000007BD C20C00                  		ret 12
   823                                  
   824                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
   825                                  background:
   826                                  
   827 000007C0 55                      		push bp
   828 000007C1 89E5                    		mov bp,sp
   829 000007C3 52                      		push dx
   830 000007C4 51                      		push cx
   831 000007C5 53                      		push bx
   832 000007C6 50                      		push ax
   833 000007C7 06                      		push es
   834 000007C8 57                      		push di
   835 000007C9 56                      		push si
   836                                  
   837 000007CA 8B0E[2803]              		mov cx,[divider1]
   838 000007CE D1E9                    		shr cx,1  
   839                                  
   840 000007D0 B800B8                  		mov ax,0xb800
   841 000007D3 8EC0                    		mov es,ax
   842 000007D5 BF0000                  		mov di,0
   843 000007D8 B82010                  		mov ax,0x1020
   844                                  
   845                                  		;colours background to dark blue
   846                                  		colorbk:
   847 000007DB 268905                  		mov [es:di],ax
   848 000007DE 83C702                  		add di,2
   849 000007E1 49                      		dec cx
   850 000007E2 75F7                    		jnz colorbk
   851                                  
   852                                  		;drawing buildings
   853                                  
   854 000007E4 6A03                    		push 0x3
   855 000007E6 6A03                    		push 0x3
   856 000007E8 6A60                    		push 0x60
   857 000007EA 6A0A                    		push 10
   858 000007EC 6A0E                    		push 14
   859 000007EE 6A00                    		push 0
   860 000007F0 E842FF                  		call drawBuilding
   861                                  
   862                                  
   863 000007F3 6A03                    		push 0x3
   864 000007F5 6A03                    		push 0x3
   865 000007F7 6A50                    		push 0x50
   866 000007F9 6A10                    		push 0x10
   867 000007FB 6A09                    		push 0x9
   868 000007FD 683C05                  		push 1340
   869 00000800 E832FF                  		call drawBuilding
   870                                  
   871                                  
   872                                  
   873 00000803 6A03                    		push 0x3
   874 00000805 6A03                    		push 0x3
   875 00000807 6A40                    		push 0x40
   876 00000809 6A09                    		push 0x9
   877 0000080B 6A10                    		push 0x10
   878 0000080D 684C03                  		push 844
   879 00000810 E822FF                  		call drawBuilding
   880                                  
   881 00000813 6A03                    		push 0x3
   882 00000815 6A03                    		push 0x3
   883 00000817 6A20                    		push 0x20
   884 00000819 6A09                    		push 0x9
   885 0000081B 6A10                    		push 0x10
   886 0000081D 686E05                  		push 1390
   887 00000820 E812FF                  		call drawBuilding
   888                                  
   889 00000823 6A03                    		push 0x3
   890 00000825 6A03                    		push 0x3
   891 00000827 6A60                    		push 0x60
   892 00000829 6A09                    		push 0x9
   893 0000082B 6A10                    		push 0x10
   894 0000082D 686802                  		push 616
   895 00000830 E802FF                  		call drawBuilding
   896                                  
   897 00000833 6A02                    		push 0x2
   898 00000835 6A03                    		push 0x3
   899 00000837 6A40                    		push 0x40
   900 00000839 6A09                    		push 0x9
   901 0000083B 6A10                    		push 0x10
   902 0000083D 68E602                  		push 742
   903 00000840 E8F2FE                  		call drawBuilding
   904                                  
   905                                  
   906                                  
   907 00000843 6A04                    		push 0x4
   908 00000845 6A03                    		push 0x3
   909 00000847 6A50                    		push 0x50
   910 00000849 6A10                    		push 0x10
   911 0000084B 6A09                    		push 0x9
   912 0000084D 681006                  		push 1552
   913 00000850 E8E2FE                  		call drawBuilding
   914                                  
   915                                  
   916 00000853 6A03                    		push 0x3
   917 00000855 6A03                    		push 0x3
   918 00000857 6A20                    		push 0x20
   919 00000859 6A09                    		push 0x9
   920 0000085B 6A10                    		push 0x10
   921 0000085D 68E404                  		push 1252
   922 00000860 E8D2FE                  		call drawBuilding
   923                                  
   924                                  
   925 00000863 6A02                    		push 0x2
   926 00000865 6A03                    		push 0x3
   927 00000867 6A60                    		push 0x60
   928 00000869 6A09                    		push 0x9
   929 0000086B 6A10                    		push 0x10
   930 0000086D 68C202                  		push 706
   931 00000870 E8C2FE                  		call drawBuilding
   932                                  
   933 00000873 6A02                    		push 0x2
   934 00000875 6A03                    		push 0x3
   935 00000877 6A60                    		push 0x60
   936 00000879 6A09                    		push 0x9
   937 0000087B 6A10                    		push 0x10
   938 0000087D B86802                  		mov ax,616
   939 00000880 50                      		push ax
   940 00000881 E8B1FE                  		call drawBuilding
   941                                  
   942 00000884 6A02                    		push 0x2
   943 00000886 6A03                    		push 0x3
   944 00000888 6A50                    		push 0x50
   945 0000088A 6A09                    		push 0x9
   946 0000088C 6A10                    		push 0x10
   947 0000088E B89205                  		mov ax,1426
   948 00000891 50                      		push ax
   949 00000892 E8A0FE                  		call drawBuilding
   950                                  		
   951 00000895 6A02                    		push 0x2
   952 00000897 6A03                    		push 0x3
   953 00000899 6A40                    		push 0x40
   954 0000089B 6A09                    		push 0x9
   955 0000089D 6A10                    		push 0x10
   956 0000089F B89C04                  		mov ax,1180
   957 000008A2 50                      		push ax
   958 000008A3 E88FFE                  		call drawBuilding
   959                                  	
   960                                  		
   961                                  		;drawing trees
   962 000008A6 68C80C                  		push 3272
   963 000008A9 E8ABFD                  		call drawTrees
   964                                  		
   965 000008AC 680E0D                  		push 3342
   966 000008AF E8A5FD                  		call drawTrees
   967                                  		
   968 000008B2 685E0D                  		push 3422
   969 000008B5 E89FFD                  		call drawTrees
   970                                  		
   971 000008B8 68700C                  		push 3184
   972 000008BB E899FD                  		call drawTrees
   973                                  		
   974 000008BE 5E                      		pop si
   975 000008BF 5F                      		pop di
   976 000008C0 07                      		pop es
   977 000008C1 58                      		pop ax
   978 000008C2 5B                      		pop bx
   979 000008C3 59                      		pop cx
   980 000008C4 5A                      		pop dx
   981 000008C5 5D                      		pop bp
   982                                  
   983 000008C6 C3                      		ret
   984                                  
   985                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
   986                                  foreground:
   987                                  ;stores old value of registers
   988 000008C7 55                      		push bp
   989 000008C8 50                      		push ax
   990 000008C9 53                      		push bx
   991 000008CA 51                      		push cx
   992 000008CB 52                      		push dx
   993 000008CC 06                      		push es
   994 000008CD 57                      		push di
   995 000008CE 56                      		push si
   996                                  
   997                                  		;points at videobase
   998 000008CF B800B8                  		mov ax,0xb800
   999 000008D2 8EC0                    		mov es,ax
  1000                                  		;total no of cells in divider
  1001 000008D4 8B3E[2803]              		mov di,[divider1]
  1002 000008D8 033E[2603]              		add di,[total_col]     ;2 bytes
  1003 000008DC 033E[2603]              		add di,[total_col]
  1004                                  
  1005                                  		;colour for foreground
  1006 000008E0 B82030                  		mov ax,0x3020
  1007                                  
  1008                                  		;position of 2nd divider starts after end of first divider
  1009 000008E3 8B0E[2803]              		mov cx,[divider1]
  1010 000008E7 D1E9                    		shr cx,1
  1011 000008E9 2B0E[2603]              		sub cx,[total_col]
  1012                                  
  1013                                  		;colours foreground
  1014                                  		colorfk:
  1015 000008ED 268905                  		mov [es:di],ax
  1016 000008F0 83C702                  		add di,2
  1017 000008F3 49                      		dec cx
  1018 000008F4 75F7                    		jnz colorfk
  1019                                  
  1020                                  		;position of 2nd divider2
  1021 000008F6 8B0E[2A03]              		mov cx,[divider2]
  1022 000008FA 030E[2603]              		add cx,[total_col]
  1023 000008FE 030E[2603]              		add cx,[total_col]
  1024                                  
  1025                                  		;for ten waves per line, total no of columns are divided by 10 and space is decided accordingly
  1026 00000902 A1[2603]                		mov ax,[total_col]
  1027 00000905 BB0A00                  		mov bx,10
  1028 00000908 BA0000                  		mov dx,0
  1029 0000090B F7F3                    		div bx
  1030 0000090D 89C6                    		mov si,ax
  1031 0000090F 89C3                    		mov bx,ax
  1032 00000911 83C301                  		add bx,1
  1033                                  		;position of waves start from end of second divider
  1034 00000914 8B3E[2803]              		mov di,[divider1]
  1035 00000918 033E[2603]              		add di,[total_col]
  1036 0000091C 033E[2603]              		add di,[total_col]
  1037 00000920 033E[2603]              		add di,[total_col]
  1038 00000924 033E[2603]              		add di,[total_col]
  1039                                  		;texture for waves
  1040 00000928 B85E3F                  		mov ax,0x3f5e 
  1041 0000092B 8B2E[2603]              		mov bp,[total_col]
  1042                                  
  1043                                  		;printswaves
  1044                                  		printWaves:
  1045 0000092F 83FE00                  		 cmp si,0
  1046 00000932 7517                    		 jnz skip4
  1047                                  		 ;prints three waves in a row
  1048 00000934 268905                  		 mov [es:di],ax
  1049 00000937 83C702                  		 add di,2
  1050 0000093A 268905                  		 mov [es:di],ax
  1051 0000093D 83C702                  		 add di,2
  1052 00000940 268905                  		 mov [es:di],ax
  1053                                  		 ;restores value of di
  1054 00000943 83EF02                  		 sub di,2
  1055 00000946 83EF02                  		 sub di,2
  1056 00000949 89DE                    		 mov si,bx;si=13
  1057                                  
  1058                                  		 skip4:
  1059                                  
  1060 0000094B 83EE01                  		 sub si,1
  1061 0000094E 83C702                  		 add di,2
  1062 00000951 4D                      		 dec bp
  1063                                  
  1064 00000952 7524                    		jnz skip5
  1065                                  		;skips five rows for realistic effect of waves
  1066 00000954 8B2E[2603]              		mov bp,[total_col]
  1067 00000958 033E[2603]              		add di,[total_col]
  1068 0000095C 033E[2603]              		add di,[total_col]
  1069 00000960 033E[2603]              		add di,[total_col]
  1070 00000964 033E[2603]              		add di,[total_col]
  1071 00000968 033E[2603]              		add di,[total_col]
  1072 0000096C 033E[2603]              		add di,[total_col]
  1073 00000970 033E[2603]              		add di,[total_col]
  1074 00000974 033E[2603]              		add di,[total_col]
  1075                                  
  1076                                  		skip5:
  1077 00000978 39CF                    		cmp di,cx
  1078 0000097A 72B3                    		jb printWaves
  1079                                  
  1080                                  
  1081                                  		;prints boat
  1082 0000097C 685415                  		push 5460
  1083 0000097F E81DFD                  		call drawBoat
  1084                                  ;restores old values of registers
  1085 00000982 5E                      		pop si
  1086 00000983 5F                      		pop di
  1087 00000984 07                      		pop es
  1088 00000985 5A                      		pop dx
  1089 00000986 59                      		pop cx
  1090 00000987 5B                      		pop bx
  1091 00000988 58                      		pop ax
  1092 00000989 5D                      		pop bp
  1093 0000098A C3                      		ret
  1094                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1095                                  clrscr:		
  1096 0000098B 06                              push es
  1097 0000098C 50                      	    push ax
  1098 0000098D 57                              push di
  1099                                  
  1100 0000098E B800B8                  		mov ax, 0xb800
  1101 00000991 8EC0                    		mov es, ax					; point es to video base
  1102 00000993 BF0000                  		mov di, 0					; point di to top left column
  1103 00000996 B407                    		mov ah, 0x07
  1104 00000998 B020                    		mov al, 0x20
  1105                                  
  1106                                          nextloc:	
  1107 0000099A 268905                              mov word [es:di], AX	; clear next char on screen
  1108 0000099D 83C702                  			add di, 2					; move to next screen location
  1109 000009A0 3B3E[2203]              			cmp di,	[totalcells]          		; 132x43x2
  1110 000009A4 72F4                    			jb nextloc					; if no clear next position
  1111                                  
  1112 000009A6 5F                      		pop di
  1113 000009A7 58                      		pop ax
  1114 000009A8 07                      		pop es
  1115 000009A9 C3                      		ret
  1116                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1117                                  dividers:
  1118                                     
  1119 000009AA 06                          push es
  1120 000009AB 50                          push ax
  1121 000009AC 53                          push bx
  1122 000009AD 51                          push cx
  1123 000009AE 52                          push dx 
  1124 000009AF 57                          push di
  1125                                  
  1126                                  ;pointing to videobase
  1127 000009B0 B800B8                     mov ax,0xb800
  1128 000009B3 8EC0                       mov  es,ax
  1129                                     
  1130                                     ;132*rows/3+col   1/3 divider
  1131 000009B5 B82B00                  	mov ax,0x2B ;43
  1132 000009B8 BB0300                  	mov bx,0x3
  1133 000009BB 31D2                    	xor dx,dx ;dx=0
  1134                                  	
  1135 000009BD F7F3                    	div bx
  1136 000009BF 89C3                    	mov bx,ax
  1137                                  	
  1138 000009C1 A1[2603]                	mov  ax, [total_col]
  1139 000009C4 F7E3                    	mul bx
  1140 000009C6 D1E0                    	shl ax,1
  1141                                  	
  1142 000009C8 A3[2803]                	mov [divider1],ax
  1143 000009CB 89C7                    	mov di,ax
  1144                                  
  1145 000009CD B407                        mov ah, 0x07
  1146 000009CF B02D                        mov al, '-'
  1147                                  	
  1148 000009D1 8B0E[2603]              	mov cx,[total_col]
  1149                                  	
  1150                                  loop1:
  1151 000009D5 268905                      mov [es:di], ax
  1152 000009D8 83C702                      add di,2
  1153 000009DB 49                          dec cx
  1154 000009DC 75F7                        jnz loop1
  1155                                  	
  1156                                  	
  1157                                  	  ;132*rows*2/3+col  2/3 divider
  1158 000009DE B82B00                  	mov ax,0x2B
  1159 000009E1 D1E0                    	shl ax,1
  1160 000009E3 BB0300                  	mov bx,0x3
  1161 000009E6 31D2                    	xor dx,dx
  1162                                  	
  1163 000009E8 F7F3                    	div bx
  1164 000009EA 89C3                    	mov bx,ax
  1165                                  	
  1166 000009EC A1[2603]                	mov  ax, [total_col]
  1167 000009EF F7E3                    	mul bx
  1168 000009F1 D1E0                    	shl ax,1
  1169                                  	
  1170 000009F3 A3[2A03]                	mov [divider2],ax
  1171 000009F6 89C7                    	mov di,ax
  1172                                  
  1173 000009F8 B407                        mov ah, 0x07
  1174 000009FA B02D                        mov al, '-'
  1175                                  	;one row has 132 columns and to go from 0th column to 131st column
  1176 000009FC 8B0E[2603]              	mov cx,[total_col]
  1177                                  	
  1178                                  loop2:
  1179 00000A00 268905                  mov [es:di], ax
  1180 00000A03 83C702                      add di,2
  1181 00000A06 49                          dec cx
  1182 00000A07 75F7                        jnz loop2
  1183                                  
  1184 00000A09 5F                          pop di
  1185 00000A0A 5A                          pop dx
  1186 00000A0B 59                          pop cx
  1187 00000A0C 5B                          pop bx
  1188 00000A0D 58                          pop ax
  1189 00000A0E 07                          pop es
  1190                                     
  1191 00000A0F C3                          ret 
  1192                                  	
  1193                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------	
  1194                                  printMainScreen:
  1195                                   
  1196 00000A10 E897FF                    call dividers
  1197 00000A13 E8AAFD                    call background
  1198 00000A16 E8AEFE                    call foreground
  1199 00000A19 E88EFF                    call dividers
  1200 00000A1C C3                        ret
  1201                                  	;------------------------------------------------------------------------------------------------------------------------------------------------------------
  1202                                  platform_animation:	
  1203 00000A1D 50                      push ax
  1204 00000A1E 51                      push cx
  1205                                  
  1206 00000A1F C706[4003]3E00          mov word [p2_y],62
  1207 00000A25 A1[3403]                mov ax,[rab_x]
  1208 00000A28 83C001                  add ax,1;checks if rabbit is on platform no 2
  1209                                  
  1210                                  rightplt:
  1211 00000A2B 3B06[3E03]              cmp word ax,[p2_x]
  1212 00000A2F 7505                    jne skip8
  1213 00000A31 8306[3603]01            add word [rab_y],1
  1214                                  skip8:
  1215 00000A36 8306[4003]01            add word [p2_y],1
  1216 00000A3B E89C02                  call print_gameScreen
  1217 00000A3E E806FB                  call delayplat
  1218 00000A41 E803FB                  call delayplat
  1219 00000A44 E8E702                  call check_carrot
  1220 00000A47 833E[4003]52            cmp word [p2_y],82
  1221 00000A4C 75DD                    jne rightplt
  1222                                  
  1223 00000A4E B92800                  mov cx,40
  1224                                  leftplt:
  1225                                  	
  1226 00000A51 3B06[3E03]              cmp word ax,[p2_x]
  1227 00000A55 7505                    jne skip7
  1228 00000A57 832E[3603]01            sub word [rab_y],1
  1229                                  skip7:
  1230 00000A5C 832E[4003]01            sub word [p2_y],1
  1231 00000A61 E87602                  call print_gameScreen
  1232 00000A64 E8E0FA                  call delayplat
  1233 00000A67 E8DDFA                  call delayplat
  1234 00000A6A E8C102                  call check_carrot
  1235 00000A6D E2E2                    loop leftplt
  1236                                  
  1237                                  rightpl:
  1238 00000A6F 3B06[3E03]              cmp word ax,[p2_x]
  1239 00000A73 7505                    jne skip6
  1240 00000A75 8306[3603]01            add word [rab_y],1
  1241                                  skip6:
  1242 00000A7A 8306[4003]01            add word [p2_y],1
  1243 00000A7F E85802                  call print_gameScreen
  1244 00000A82 E8C2FA                  call delayplat
  1245 00000A85 E8BFFA                  call delayplat
  1246 00000A88 E8A302                  call check_carrot
  1247 00000A8B 833E[4003]3E            cmp word [p2_y],62
  1248 00000A90 75DD                    jne rightpl
  1249                                  
  1250 00000A92 59                      pop cx
  1251 00000A93 58                      pop ax
  1252 00000A94 C3                      ret	
  1253                                  ;//////////////////////////////////
  1254                                  platform_animation1:	
  1255 00000A95 50                      push ax
  1256 00000A96 51                      push cx
  1257                                  
  1258 00000A97 C706[3A03]3E00          mov word [p1_y],62
  1259                                  ; mov ax,[rab_x]
  1260                                  ; add ax,1;checks if rabbit is on platform no 2
  1261                                  
  1262                                  rightplt1:
  1263                                  ; cmp word ax,[p2_x]
  1264                                  ; jne skip8
  1265                                  ; add word [rab_y],1
  1266                                  ;skip8:
  1267 00000A9D 8306[3A03]01            add word [p1_y],1
  1268 00000AA2 E83502                  call print_gameScreen
  1269 00000AA5 E89FFA                  call delayplat
  1270                                  ;call delayplat
  1271                                  ;call check_carrot
  1272 00000AA8 833E[3A03]52            cmp word [p1_y],82
  1273 00000AAD 75EE                    jne rightplt1
  1274                                  
  1275 00000AAF B92800                  mov cx,40
  1276                                  leftplt1:
  1277                                  	
  1278                                  ; cmp word ax,[p2_x]
  1279                                  ; jne skip7
  1280                                  ; sub word [rab_y],1
  1281                                  ;skip7:
  1282 00000AB2 832E[3A03]01            sub word [p1_y],1
  1283 00000AB7 E82002                  call print_gameScreen
  1284 00000ABA E88AFA                  call delayplat
  1285                                  ;call delayplat
  1286                                  ;call check_carrot
  1287 00000ABD E2F3                    loop leftplt1
  1288                                  
  1289                                  rightpl1:
  1290                                  ; cmp word ax,[p2_x]
  1291                                  ; jne skip6
  1292                                  ; add word [rab_y],1
  1293                                  ; skip6:
  1294 00000ABF 8306[3A03]01            add word [p1_y],1
  1295 00000AC4 E81302                  call print_gameScreen
  1296 00000AC7 E87DFA                  call delayplat
  1297                                  ;call delayplat
  1298                                  ;call check_carrot
  1299 00000ACA 833E[3A03]3E            cmp word [p1_y],62
  1300 00000ACF 75EE                    jne rightpl1
  1301                                  
  1302 00000AD1 59                      pop cx
  1303 00000AD2 58                      pop ax
  1304 00000AD3 C3                      ret	
  1305                                  ;------------------------------------------------------------------------------------------------------------------------------------------------------------
  1306                                  
  1307                                  checkifRabbitonPlat:
  1308 00000AD4 50                      push ax
  1309 00000AD5 06                      push es
  1310 00000AD6 57                      push di
  1311 00000AD7 52                      push dx
  1312                                  
  1313 00000AD8 B90000                  mov cx,0 ;false
  1314                                  
  1315                                  ;calculates position of offset below rabbit
  1316 00000ADB A1[3403]                mov ax,[rab_x]
  1317 00000ADE 83C001                  add ax,1
  1318                                  
  1319 00000AE1 FF36[3603]              push word [rab_y]
  1320 00000AE5 50                      push ax
  1321 00000AE6 E8A5F9                  call offset_no
  1322                                  
  1323                                  ;checks if space below rabbit is black 
  1324 00000AE9 89D7                    mov di,dx
  1325                                  
  1326 00000AEB B800B8                  mov ax,0xb800
  1327 00000AEE 8EC0                    mov es,ax
  1328                                  
  1329 00000AF0 83C708                  add di,8;go to tail
  1330 00000AF3 26833D20                cmp word [es:di],0x0020;black background
  1331 00000AF7 7526                    jne true
  1332 00000AF9 83EF02                  sub di,2;check if platform is there for each comparision
  1333 00000AFC 26833D20                cmp word [es:di],0x0020
  1334 00000B00 751D                    jne true
  1335 00000B02 83EF02                  sub di,2
  1336 00000B05 26833D20                cmp word [es:di],0x0020
  1337 00000B09 7514                    jne true
  1338 00000B0B 83EF02                  sub di,2
  1339 00000B0E 26833D20                cmp word [es:di],0x0020
  1340 00000B12 750B                    jne true
  1341 00000B14 83EF02                  sub di,2
  1342 00000B17 26833D20                cmp word [es:di],0x0020
  1343 00000B1B 7502                    jne true
  1344 00000B1D EB03                    jmp skip
  1345                                  
  1346                                  true:
  1347 00000B1F B90100                  mov cx,1;true
  1348                                  
  1349                                  skip:
  1350                                  
  1351 00000B22 5A                      pop dx
  1352 00000B23 5F                      pop di
  1353 00000B24 07                      pop es
  1354 00000B25 58                      pop ax
  1355 00000B26 C3                      ret
  1356                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1357                                  check_bluebrick:
  1358 00000B27 50                      push ax
  1359 00000B28 06                      push es
  1360 00000B29 57                      push di
  1361 00000B2A 52                      push dx
  1362                                  
  1363                                  ;calculate offset of position below rabbit
  1364                                  
  1365 00000B2B C706[F200]0000          mov word [blue],0 ;false
  1366 00000B31 C706[F400]0000          mov word [tickcount],0
  1367                                  
  1368 00000B37 A1[3403]                mov ax,[rab_x]
  1369 00000B3A 83C001                  add ax,1
  1370                                  
  1371 00000B3D FF36[3603]              push word [rab_y]
  1372 00000B41 50                      push ax
  1373 00000B42 E849F9                  call offset_no
  1374                                  
  1375                                  
  1376                                  ;checks if colour of space below rabbit is blue
  1377 00000B45 89D7                    mov di,dx
  1378                                  
  1379 00000B47 B800B8                  mov ax,0xb800
  1380 00000B4A 8EC0                    mov es,ax
  1381                                  
  1382 00000B4C 83C708                  add di,8;go to tail
  1383 00000B4F 26813D2030              cmp word [es:di],0x3020;blue platform check
  1384 00000B54 742A                    je true1
  1385 00000B56 83EF02                  sub di,2;check if platform is there for each comparision
  1386 00000B59 26813D2030              cmp word [es:di],0x3020
  1387 00000B5E 7420                    je true1
  1388 00000B60 83EF02                  sub di,2
  1389 00000B63 26813D2030              cmp word [es:di],0x3020
  1390 00000B68 7416                    je true1
  1391 00000B6A 83EF02                  sub di,2
  1392 00000B6D 26813D2030              cmp word [es:di],0x3020
  1393 00000B72 740C                    je true1
  1394 00000B74 83EF02                  sub di,2
  1395 00000B77 26813D2030              cmp word [es:di],0x3020
  1396 00000B7C 7402                    je true1
  1397 00000B7E EB06                    jmp skip11
  1398                                  
  1399                                  ;if the platform is blue, move true in variable later to be used in timer
  1400                                  true1:
  1401 00000B80 C706[F200]0100          mov word [blue],1;true
  1402                                  
  1403                                  skip11:
  1404 00000B86 5A                      pop dx
  1405 00000B87 5F                      pop di
  1406 00000B88 07                      pop es
  1407 00000B89 58                      pop ax
  1408 00000B8A C3                      ret
  1409                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1410                                  jump_animation:
  1411 00000B8B 50                      push ax
  1412 00000B8C 51                      push cx
  1413 00000B8D 06                      push es
  1414                                  
  1415 00000B8E B800B8                  mov ax,0xb800
  1416 00000B91 8EC0                    mov es,ax
  1417                                  
  1418 00000B93 B90600                  mov cx,6
  1419 00000B96 C706[3203]1000          mov word [rab_att],0x10;dark blue
  1420                                  
  1421                                  jumploop:
  1422 00000B9C E8B7F9                  call delay
  1423 00000B9F 832E[3403]01            sub word [rab_x],1;row is decrementing to make rabbit go up
  1424 00000BA4 E88701                  call check_carrot
  1425 00000BA7 E83001                  call print_gameScreen
  1426 00000BAA E2F0                    loop jumploop
  1427                                  
  1428 00000BAC C706[3203]7000          mov word [rab_att],0x70;white
  1429                                  
  1430 00000BB2 07                      pop es
  1431 00000BB3 59                      pop cx
  1432 00000BB4 58                      pop ax
  1433 00000BB5 C3                      ret
  1434                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1435                                  displayEndgame:
  1436 00000BB6 50                      push ax
  1437 00000BB7 53                      push bx
  1438 00000BB8 51                      push cx
  1439 00000BB9 52                      push dx
  1440 00000BBA 55                      push bp
  1441 00000BBB 06                      push es
  1442 00000BBC E8CCFD                  call clrscr
  1443 00000BBF B80D00                  mov ax, 0x000D ; set 320x200 graphics mode
  1444 00000BC2 CD10                    int 0x10 ; bios video services
  1445                                  
  1446 00000BC4 B413                    mov ah, 0x13		; service 13 - print string
  1447                                  		
  1448 00000BC6 B001                    		mov al, 1			
  1449 00000BC8 B700                    		mov bh, 0			; output on page 0
  1450                                  		
  1451 00000BCA B30F                    		mov bl, 0x0f
  1452 00000BCC B91500                  		mov cx, 21
  1453 00000BCF BA0A0F                  		mov dx, 0x0f0a; row 10 column 3
  1454                                  		
  1455                                  		;es:bp = ds:message
  1456 00000BD2 1E                      		push ds
  1457 00000BD3 07                      		pop es				; es=ds segment of string
  1458 00000BD4 BD[5E03]                		mov bp, endgame;offset of string
  1459                                  		
  1460 00000BD7 CD10                    		INT 0x10
  1461                                  		
  1462                                  		
  1463 00000BD9 B413                    		mov ah, 0x13		; service 13 - print string
  1464                                  		
  1465 00000BDB B001                    		mov al, 1			
  1466 00000BDD B700                    		mov bh, 0			; output on page 0
  1467                                  		
  1468 00000BDF B30F                    		mov bl, 0x0f
  1469 00000BE1 B90600                  		mov cx, 6
  1470 00000BE4 BA1012                  		mov dx, 0x1210; row 10 column 3
  1471                                  		
  1472                                  		;es:bp = ds:message
  1473 00000BE7 1E                      		push ds
  1474 00000BE8 07                      		pop es				; es=ds segment of string
  1475 00000BE9 BD[5603]                		mov bp, message;offset of string
  1476                                  		
  1477 00000BEC CD10                    		INT 0x10
  1478                                  		
  1479 00000BEE FF36[5403]              		push word [score]
  1480 00000BF2 E835F8                  		call printnum_BIOS
  1481                                  		
  1482                                  		
  1483 00000BF5 07                      pop es
  1484 00000BF6 5D                      pop bp
  1485 00000BF7 5A                      pop dx
  1486 00000BF8 59                      pop cx
  1487 00000BF9 5B                      pop bx
  1488 00000BFA 58                      pop ax
  1489 00000BFB C3                      ret
  1490                                  ;-----------------------------------------------------------------------------------------------------------------
  1491                                  print_platform3:
  1492 00000BFC 60                      pusha
  1493 00000BFD A1[4603]                mov ax,[p3_y]
  1494 00000C00 50                      push ax
  1495 00000C01 A1[4403]                mov ax,[p3_x]
  1496 00000C04 50                      push ax
  1497 00000C05 E886F8                  call offset_no
  1498                                  ;platform 1
  1499                                  
  1500 00000C08 A1[4803]                mov ax,word [p3_att]
  1501 00000C0B 50                      push ax
  1502 00000C0C 6A10                    push 16
  1503 00000C0E 6A01                    push 1
  1504 00000C10 52                      push dx
  1505 00000C11 E8D3FA                  call drawRectangle
  1506 00000C14 61                      popa 
  1507 00000C15 C3                      ret
  1508                                  ;-----------------------------------------------------------------------------------------------------------------
  1509                                  print_platform2:
  1510 00000C16 50                      push ax
  1511 00000C17 52                      push dx
  1512                                  ;platform 2
  1513 00000C18 A1[4003]                mov ax,[p2_y]
  1514 00000C1B 50                      push ax
  1515 00000C1C A1[3E03]                mov ax,[p2_x]
  1516 00000C1F 50                      push ax
  1517 00000C20 E86BF8                  call offset_no
  1518                                  
  1519 00000C23 FF36[4203]              push word [p2_att]
  1520 00000C27 6A10                    push 16
  1521 00000C29 6A01                    push 1
  1522 00000C2B 52                      push dx
  1523 00000C2C E8B8FA                  call drawRectangle
  1524 00000C2F 5A                      pop dx 
  1525 00000C30 58                      pop ax
  1526 00000C31 C3                      ret
  1527                                  
  1528                                  ;-----------------------------------------------------------------------------------------------------------------
  1529                                  print_platform1:
  1530 00000C32 50                      push ax
  1531 00000C33 52                      push dx
  1532                                  
  1533 00000C34 A1[3A03]                mov ax,[p1_y]
  1534 00000C37 50                      push ax
  1535 00000C38 A1[3803]                mov ax,[p1_x]
  1536 00000C3B 50                      push ax
  1537 00000C3C E84FF8                  call offset_no
  1538                                  ;platform 1
  1539                                  
  1540 00000C3F A1[3C03]                mov ax, word [p1_att]
  1541 00000C42 50                      push ax
  1542 00000C43 6A10                    push 16
  1543 00000C45 6A01                    push 1
  1544 00000C47 52                      push dx
  1545 00000C48 E89CFA                  call drawRectangle
  1546 00000C4B 5A                      pop dx
  1547 00000C4C 58                      pop ax
  1548 00000C4D C3                      ret
  1549                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1550                                  drawRabbit:
  1551 00000C4E 50                      push ax
  1552 00000C4F 52                      push dx
  1553                                  
  1554 00000C50 A1[3603]                mov ax,[rab_y]
  1555 00000C53 50                      push ax
  1556 00000C54 A1[3403]                mov ax,[rab_x]
  1557 00000C57 50                      push ax
  1558 00000C58 E833F8                  call offset_no
  1559                                  
  1560 00000C5B FF36[3203]              push word [rab_att]
  1561 00000C5F 6A04                    push 4
  1562 00000C61 6A01                    push 1
  1563 00000C63 52                      push dx
  1564 00000C64 E880FA                  call drawRectangle
  1565                                  
  1566 00000C67 81EA0801                sub dx,264
  1567                                  
  1568 00000C6B FF36[3203]              push word [rab_att]
  1569 00000C6F 6A01                    push 1
  1570 00000C71 6A01                    push 1
  1571 00000C73 52                      push dx
  1572 00000C74 E870FA                  call drawRectangle
  1573                                  
  1574 00000C77 81EA0801                sub dx,264
  1575                                  
  1576 00000C7B FF36[3203]              push word [rab_att]
  1577 00000C7F 6A01                    push 1
  1578 00000C81 6A01                    push 1
  1579 00000C83 52                      push dx
  1580 00000C84 E860FA                  call drawRectangle
  1581                                  
  1582 00000C87 81C20801                add dx,264
  1583 00000C8B 81C20801                add dx,264
  1584 00000C8F 83C208                  add dx,8
  1585                                  
  1586 00000C92 6A50                    push 0x50
  1587 00000C94 6A01                    push 1
  1588 00000C96 6A01                    push 1
  1589 00000C98 52                      push dx
  1590 00000C99 E84BFA                  call drawRectangle
  1591                                  
  1592 00000C9C 81EA0801                sub dx,264
  1593 00000CA0 83EA0A                  sub dx,10
  1594                                  
  1595 00000CA3 FF36[3203]              push word [rab_att]
  1596 00000CA7 6A01                    push 1
  1597 00000CA9 6A01                    push 1
  1598 00000CAB 52                      push dx
  1599 00000CAC E838FA                  call drawRectangle
  1600                                  
  1601 00000CAF 5A                      pop dx
  1602 00000CB0 58                      pop ax
  1603 00000CB1 C3                      ret
  1604                                  
  1605                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1606                                  drawCarrot:
  1607 00000CB2 50                      push ax
  1608 00000CB3 52                      push dx
  1609                                  
  1610 00000CB4 A1[4E03]                mov ax,[carrot_y]
  1611 00000CB7 50                      push ax
  1612 00000CB8 A1[4C03]                mov ax,[carrot_x]
  1613 00000CBB 50                      push ax
  1614 00000CBC E8CFF7                  call offset_no
  1615                                  
  1616 00000CBF FF36[5003]              push word [carr_collect1]
  1617 00000CC3 6A04                    push 4
  1618 00000CC5 6A01                    push 1
  1619 00000CC7 52                      push dx
  1620 00000CC8 E81CFA                  call drawRectangle
  1621                                  
  1622 00000CCB FF36[5203]              push word [carr_collect2]
  1623 00000CCF 6A01                    push 1
  1624 00000CD1 6A01                    push 1
  1625 00000CD3 52                      push dx
  1626 00000CD4 E810FA                  call drawRectangle
  1627                                  
  1628 00000CD7 5A                      pop dx
  1629 00000CD8 58                      pop ax
  1630 00000CD9 C3                      ret
  1631                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1632                                  print_gameScreen: 
  1633 00000CDA 55                      push bp
  1634 00000CDB 89E5                    mov bp,sp
  1635 00000CDD 50                      push ax
  1636 00000CDE 53                      push bx
  1637 00000CDF 51                      push cx
  1638 00000CE0 52                      push dx
  1639 00000CE1 57                      push di
  1640 00000CE2 06                      push es
  1641                                  	 
  1642                                  
  1643 00000CE3 B800B8                  mov ax,0xb800
  1644 00000CE6 8EC0                    mov es,ax
  1645                                  
  1646                                  ;background3
  1647 00000CE8 BFE81D                  mov di,7656
  1648 00000CEB B82000                  mov ax,0x0020
  1649                                  
  1650                                  bck3:
  1651 00000CEE 268905                  mov [es:di],ax
  1652 00000CF1 83C702                  add di,2
  1653 00000CF4 81FF582C                cmp di,11352
  1654 00000CF8 75F4                    jnz bck3
  1655                                  	 
  1656                                  
  1657 00000CFA E835FF                  call print_platform1
  1658 00000CFD E816FF                  call print_platform2
  1659 00000D00 E8F9FE                  call print_platform3
  1660                                  	 
  1661                                  	 
  1662                                  
  1663                                  
  1664                                  ;carrot
  1665 00000D03 E8ACFF                  call drawCarrot
  1666                                  ;rabbit
  1667 00000D06 E845FF                  call drawRabbit
  1668                                  
  1669                                  ;score
  1670 00000D09 6A78                        push 120
  1671 00000D0B 6A1D                        push 29
  1672 00000D0D B80700                  	 mov ax, 0x07
  1673 00000D10 50                      	 push ax ; push attribute
  1674 00000D11 B8[5603]                	 mov ax, message
  1675 00000D14 50                      	 push ax ; push offset of string
  1676 00000D15 E8EEF7                  	 call printscore ; print the string
  1677                                  	 
  1678 00000D18 FF36[5403]              	 push word [score]
  1679 00000D1C E88CF7                  	 call printnum
  1680                                  	 
  1681                                  ;truth value to play animation or else skip if leave game message is showing
  1682 00000D1F 833E[0B00]00            cmp word [aniYes],0
  1683 00000D24 7500                    jne bye
  1684                                  	
  1685                                  bye:
  1686 00000D26 07                      pop es
  1687 00000D27 5F                      pop di
  1688 00000D28 5A                      pop dx
  1689 00000D29 59                      pop cx
  1690 00000D2A 5B                      pop bx
  1691 00000D2B 58                      pop ax
  1692 00000D2C 5D                      pop bp
  1693 00000D2D C3                      ret
  1694                                  
  1695                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1696                                  check_carrot:
  1697 00000D2E 50                      push ax
  1698 00000D2F 53                      push bx
  1699 00000D30 51                      push cx
  1700 00000D31 52                      push dx
  1701 00000D32 06                      push es
  1702 00000D33 57                      push di
  1703                                  
  1704 00000D34 A1[3403]                mov ax, [rab_x]
  1705 00000D37 8B1E[3603]              mov bx,[rab_y]
  1706                                  
  1707                                  ;checks if same row else skip
  1708 00000D3B 3B06[4C03]              cmp ax,[carrot_x]
  1709 00000D3F 7556                    jne skips
  1710                                  
  1711                                  ;checks if carrot is present 7+y position from rabbit's reference y point for body
  1712 00000D41 B90700                  mov cx,7
  1713                                  checkingcarr:
  1714 00000D44 3B1E[4E03]              cmp bx,[carrot_y]
  1715 00000D48 7419                    je true2
  1716 00000D4A 83C301                  add bx,1
  1717 00000D4D E2F5                    loop checkingcarr
  1718                                  
  1719                                  ;checks if carrot is present y-6 position from rabbit's reference y point for head
  1720 00000D4F 8B1E[3603]              mov bx,[rab_y]
  1721 00000D53 B90600                  mov cx,6
  1722                                  checkingcarr1:
  1723 00000D56 3B1E[4E03]              cmp bx,[carrot_y]
  1724 00000D5A 7407                    je true2
  1725 00000D5C 83EB01                  sub bx,1
  1726 00000D5F E2F5                    loop checkingcarr1
  1727                                  
  1728 00000D61 EB34                    jmp skips
  1729                                  
  1730                                  ;if rabbit collects carrot, move black into colour attribute, increase score and decrease delay
  1731                                  true2: 
  1732                                  ;checks if carrot is already collected or no
  1733 00000D63 833E[5003]00            cmp word  [carr_collect1],0x00
  1734 00000D68 742D                    je skips
  1735 00000D6A 8306[5403]0A            add word [score],10;increase score by 10
  1736 00000D6F 812E[4A03]FF00          sub word [delayplatform],0xFF;increase speed of platform
  1737 00000D75 C706[5003]0000          mov word [carr_collect1],0x00;black from orange
  1738 00000D7B C706[5203]0000          mov word [carr_collect2],0x00;black from green
  1739                                  
  1740                                  ;generates carrot at random position if collected
  1741 00000D81 E874F6                  call random_carroty
  1742 00000D84 8B16[7303]              mov dx,[rand]
  1743 00000D88 8916[4E03]              mov [carrot_y],dx
  1744 00000D8C E846F6                  call random_carrotx
  1745 00000D8F 8B16[7303]              mov dx,[rand]
  1746 00000D93 8916[4C03]              mov [carrot_x],dx
  1747                                  
  1748                                  
  1749                                  skips:
  1750 00000D97 5F                      pop di
  1751 00000D98 07                      pop es
  1752 00000D99 5A                      pop dx
  1753 00000D9A 59                      pop cx
  1754 00000D9B 5B                      pop bx
  1755 00000D9C 58                      pop ax
  1756 00000D9D C3                      ret
  1757                                  ;---------------------------------------------------------------------------------------------------------------------------------
  1758                                  leavegame:
  1759                                  
  1760 00000D9E 50                      push ax
  1761 00000D9F 53                      push bx
  1762 00000DA0 51                      push cx
  1763 00000DA1 52                      push dx
  1764 00000DA2 06                      push es
  1765 00000DA3 57                      push di
  1766                                  
  1767 00000DA4 E8E4FB                  call clrscr
  1768 00000DA7 B413                    mov ah, 0x13		; service 13 - print string
  1769                                  		
  1770 00000DA9 B001                    		mov al, 1			
  1771 00000DAB B700                    		mov bh, 0			; output on page 0
  1772                                  		
  1773 00000DAD B30D                    		mov bl, 0x0d
  1774 00000DAF B92800                  		mov cx, 40
  1775 00000DB2 BA2A0A                  		mov dx, 0x0a2a
  1776                                  		
  1777                                  		;es:bp = ds:message
  1778 00000DB5 1E                      		push ds
  1779 00000DB6 07                      		pop es				; es=ds segment of string
  1780 00000DB7 BD[2D00]                		mov bp, m4; bp = offset of string
  1781                                  		
  1782 00000DBA CD10                    		INT 0x10
  1783                                  		
  1784 00000DBC B413                    		mov ah, 0x13		; service 13 - print string
  1785                                  		
  1786 00000DBE B001                    		mov al, 1			
  1787 00000DC0 B700                    		mov bh, 0			; output on page 0
  1788                                  		
  1789 00000DC2 B30D                    		mov bl, 0x0d
  1790 00000DC4 B91C00                  		mov cx, 28
  1791 00000DC7 BA300B                  		mov dx, 0x0b30
  1792                                  		
  1793                                  		;es:bp = ds:message
  1794 00000DCA 1E                      		push ds
  1795 00000DCB 07                      		pop es				; es=ds segment of string
  1796 00000DCC BD[5500]                		mov bp, m3; bp = offset of string
  1797                                  		
  1798 00000DCF CD10                    		INT 0x10
  1799                                  		
  1800                                  		;stops animation so message doesnt move
  1801 00000DD1 C706[0B00]0100          		mov word [aniYes],1
  1802                                  		
  1803 00000DD7 C706[0300]0100          		mov word [esc_flag],1
  1804                                  		
  1805 00000DDD 5F                      pop di
  1806 00000DDE 07                      pop es
  1807 00000DDF 5A                      pop dx
  1808 00000DE0 59                      pop cx
  1809 00000DE1 5B                      pop bx
  1810 00000DE2 58                      pop ax
  1811 00000DE3 C3                      ret
  1812                                  		
  1813                                  	
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------------------------------------------
  1815                                  rabbit_jumped:
  1816 00000DE4 50                       push ax
  1817 00000DE5 53                          push bx
  1818 00000DE6 51                          push cx
  1819 00000DE7 52                          push dx
  1820 00000DE8 56                          push si
  1821 00000DE9 57                          push di
  1822 00000DEA 06                          push es
  1823 00000DEB 1E                          push ds
  1824                                  	
  1825                                  	
  1826                                  ;restores colour of blue brick
  1827 00000DEC C706[4803]3000          mov word [p3_att],0x30
  1828                                  
  1829 00000DF2 E896FD                  call jump_animation
  1830 00000DF5 E85EF7                  call delay
  1831 00000DF8 E85BF7                  call delay
  1832                                  
  1833                                  ;checks if rabbit has landed on platform and returns true or false value in cx
  1834 00000DFB E8D6FC                  call checkifRabbitonPlat
  1835 00000DFE 83F901                  cmp cx,1;returns bool value in cx
  1836 00000E01 0F85FD00                jne end_game
  1837                                  
  1838                                  ;checks if platform is blue
  1839 00000E05 E81FFD                  call check_bluebrick
  1840                                  
  1841                                  ;scroll down screen
  1842 00000E08 B90600                  mov cx,6
  1843                                  down:
  1844 00000E0B 8306[3403]01            add word [rab_x],1
  1845 00000E10 8306[3803]01            add word [p1_x],1
  1846 00000E15 8306[3E03]01            add word [p2_x],1
  1847 00000E1A 8306[4403]01            add word [p3_x],1
  1848 00000E1F 8306[4C03]01            add word [carrot_x],1
  1849                                  
  1850 00000E24 E8B3FE                  call print_gameScreen
  1851                                  
  1852 00000E27 E82CF7                  call delay
  1853 00000E2A E829F7                  call delay
  1854 00000E2D E2DC                    loop down
  1855                                  
  1856                                  ;if platform goes below screen, generate it again on top at random column position
  1857 00000E2F 833E[3803]2A            cmp word [p1_x],42
  1858 00000E34 7C22                    jnge skipplt1
  1859                                  
  1860 00000E36 C706[3803]1D00          mov word [p1_x],29
  1861                                  
  1862                                  ;random column generation for platform 1
  1863 00000E3C E8D2F5                  call random_plat_y
  1864 00000E3F 8B16[7303]              mov dx,[rand]
  1865 00000E43 8916[3A03]              mov word [p1_y],dx
  1866                                  
  1867                                  ;random colour generation for platform 1
  1868 00000E47 31D2                    xor dx,dx
  1869 00000E49 E829F5                  call random_colour
  1870 00000E4C 8B16[7303]              mov dx,[rand]
  1871 00000E50 8916[3C03]              mov [p1_att],dx
  1872 00000E54 31D2                    xor dx,dx
  1873                                  
  1874 00000E56 EB26                    jmp skiplt3
  1875                                  
  1876                                  skipplt1:
  1877 00000E58 833E[3E03]2A            cmp word [p2_x],42
  1878 00000E5D 7C0E                    jnge skipplt2
  1879 00000E5F C706[3E03]1D00          mov word [p2_x],29
  1880 00000E65 C706[4003]3E00          mov word [p2_y],62
  1881                                  
  1882 00000E6B EB11                    jmp skiplt3
  1883                                  
  1884                                  skipplt2:
  1885 00000E6D C706[4403]1D00          mov word [p3_x],29
  1886                                  ;random column generation for platform 3
  1887 00000E73 E89BF5                  call random_plat_y
  1888 00000E76 8B16[7303]              mov dx,[rand]
  1889 00000E7A 8916[4603]              mov word [p3_y],dx
  1890                                  
  1891                                  ;after carrot is collected, restore colour attribute regardless after jump
  1892                                  skiplt3:
  1893 00000E7E C706[5003]6000          mov word [carr_collect1],0x60;orange
  1894 00000E84 C706[5203]2000          mov word [carr_collect2],0x20;green top
  1895                                  
  1896                                  ;if carrot goes below screen, generate again at random x position
  1897 00000E8A 833E[4C03]2A            cmp word [carrot_x],42
  1898 00000E8F 7C0B                    jnge end_rabbit
  1899 00000E91 E841F5                  call random_carrotx
  1900 00000E94 8B16[7303]              mov dx,[rand]
  1901 00000E98 8916[4C03]              mov word [carrot_x],dx
  1902                                  
  1903                                  end_rabbit:
  1904 00000E9C 1F                       pop ds
  1905 00000E9D 07                          pop es
  1906 00000E9E 5F                          pop di
  1907 00000E9F 5E                          pop si
  1908 00000EA0 5A                          pop dx
  1909 00000EA1 59                          pop cx
  1910 00000EA2 5B                          pop bx
  1911 00000EA3 58                          pop ax
  1912 00000EA4 C3                          ret
  1913                                  	
  1914                                  ;-------------------------------------------------------------------------------------------------------------------------------------------------------
  1915                                  ;keyboard interrupt service routine
  1916                                  kbisr:
  1917 00000EA5 50                      push ax
  1918 00000EA6 06                      push es
  1919                                   
  1920 00000EA7 B800B8                      mov ax, 0xb800
  1921 00000EAA 8EC0                        mov es, ax
  1922                                  	
  1923 00000EAC E460                        in al, 0x60 
  1924                                  	
  1925                                  	;up key scancode
  1926 00000EAE 3C48                        cmp al, 0x48
  1927 00000EB0 7509                        jne esckey
  1928                                  
  1929                                  ;routine when up key is pressed
  1930 00000EB2 B020                    mov al,0x20
  1931 00000EB4 E620                    out 0x20,al
  1932                                  
  1933 00000EB6 E82BFF                  call rabbit_jumped
  1934 00000EB9 EB40                    jmp exit
  1935                                  
  1936                                  ;if esc key is pressed
  1937                                  esckey:
  1938 00000EBB 3C01                    cmp al,1;scancode of esc key
  1939 00000EBD 7505                    jne ykey
  1940 00000EBF E8DCFE                  call leavegame
  1941 00000EC2 EB37                    jmp exit
  1942                                  
  1943                                  ykey:
  1944 00000EC4 3C15                    cmp al,0x15;scancode of y key
  1945 00000EC6 7510                    jne nkey
  1946 00000EC8 833E[0300]01            cmp word [esc_flag],1
  1947 00000ECD 7525                    jne nomatch
  1948 00000ECF 07                      pop es
  1949 00000ED0 58                      pop ax
  1950 00000ED1 B020                    mov al, 0x20;end of interupt signal as game will end
  1951 00000ED3 E620                    out 0x20, al
  1952 00000ED5 E82A00                  call end_game
  1953                                  
  1954                                  
  1955                                  nkey: 
  1956 00000ED8 3C31                    cmp al,0x31;scancode of n key
  1957 00000EDA 7518                    jne nomatch
  1958 00000EDC 833E[0300]01            cmp word [esc_flag],1
  1959 00000EE1 7511                    jne nomatch
  1960 00000EE3 E82AFB                  call printMainScreen
  1961 00000EE6 C706[0B00]0000          mov word [aniYes],0
  1962 00000EEC C706[0300]0000          mov word [esc_flag],0
  1963 00000EF2 EB07                    jmp exit
  1964                                  ;if keys dont match, jump back to old interrupt service routine
  1965                                  nomatch:	
  1966 00000EF4 07                          pop es
  1967 00000EF5 58                      	pop ax
  1968 00000EF6 2EFF2E[2C03]                jmp far [cs:oldisr] ; call the original ISR
  1969                                  exit:		
  1970 00000EFB B020                        mov al, 0x20;end of interupt signal
  1971 00000EFD E620                        out 0x20, al 
  1972 00000EFF 07                          pop es
  1973 00000F00 58                      	pop ax
  1974 00000F01 CF                          iret 
  1975                                  ;-------------------------------------------------------------------------------------------------------------------------------	
  1976                                  ;leaves game	
  1977                                  end_game: 
  1978 00000F02 E8B1FC                  	call displayEndgame
  1979 00000F05 E96505                  	jmp end_program
  1980                                  	
  1981                                  ;----------------------------------------------------------------------------------------------------------------
  1982                                  ; timer interrupt service routine
  1983                                  timer:
  1984 00000F08 60                      pusha
  1985 00000F09 833E[F200]01            cmp word [blue],1
  1986 00000F0E 7534                    jne exit2
  1987 00000F10 8306[F400]01            add word [tickcount],1
  1988 00000F15 833E[F400]32            cmp word [tickcount],50; 3 secs as 1 sec is equal to 18 tickcounts
  1989 00000F1A 750B                    jne skiptime
  1990 00000F1C B020                    mov al, 0x20
  1991 00000F1E E620                    out 0x20, al ; end of interrupt
  1992 00000F20 61                      popa
  1993 00000F21 E892FC                  call displayEndgame
  1994 00000F24 E94605                  jmp end_program
  1995                                   
  1996                                   skiptime:
  1997 00000F27 A1[F400]                 mov ax,[tickcount]
  1998 00000F2A BB0200                   mov bx,2
  1999 00000F2D 31D2                     xor dx,dx
  2000 00000F2F F7F3                     div bx
  2001 00000F31 83FA00                   cmp dx,0
  2002 00000F34 7508                     jne blu
  2003 00000F36 C706[4803]1000           mov word [p3_att],0x10
  2004 00000F3C EB06                     jmp exit2
  2005                                   blu:
  2006 00000F3E C706[4803]3000           mov word [p3_att],0x30
  2007                                   exit2:
  2008 00000F44 833E[0B00]01             cmp word [aniYes],1
  2009 00000F49 740B                     je exit_timer
  2010                                  
  2011 00000F4B B90200                  mov cx,2
  2012                                  anii:
  2013 00000F4E E891F6                   call ShiftLeft
  2014 00000F51 E817F6                   call ShiftRight
  2015 00000F54 E2F8                     loop anii
  2016                                  
  2017                                   exit_timer:
  2018 00000F56 B020                     mov al, 0x20
  2019 00000F58 E620                     out 0x20, al ; end of interrupt
  2020 00000F5A 61                       popa
  2021 00000F5B CF                       iret ; return from interrupt
  2022                                  
  2023                                  ;------------------------------------------------------------------------------------------------------------------------------------------------------------
  2024                                  startingscreen:
  2025 00000F5C 60                      pusha
  2026 00000F5D 55                      push bp
  2027 00000F5E B80D00                  mov ax, 0x000D ; set 320x200 graphics mode
  2028 00000F61 CD10                    int 0x10 ;video services
  2029                                  
  2030                                  ;colours background pink
  2031 00000F63 B40B                    mov ah,0bh
  2032 00000F65 B700                    mov bh,00h
  2033 00000F67 B305                    mov bl,05h ;colour
  2034 00000F69 CD10                    int 0x10
  2035                                  
  2036                                  ;loops to print jump in dull white
  2037                                  
  2038                                  ;**************************************************************************************************
  2039 00000F6B B8070C                  mov ax, 0x0C07 ; put pixel in white color
  2040 00000F6E 31DB                    xor bx, bx ; page number 0
  2041 00000F70 B97800                  mov cx, 120 ; x position 120
  2042 00000F73 BA3200                  mov dx, 50 ; y position 50
  2043                                  
  2044                                  g1:
  2045 00000F76 CD10                     int 0x10 ; bios video services
  2046 00000F78 83C201                   add dx,1
  2047 00000F7B 83FA64                   cmp dx,100
  2048 00000F7E 75F6                     jne g1
  2049                                   
  2050                                   g2:
  2051 00000F80 CD10                      int 0x10 ; bios video services
  2052 00000F82 83E901                   sub cx,1
  2053 00000F85 83F964                   cmp cx,100
  2054 00000F88 75F6                     jne g2
  2055                                   
  2056                                   g3:
  2057 00000F8A CD10                     int 0x10
  2058 00000F8C 83EA01                   sub dx,1
  2059 00000F8F 83FA5A                   cmp dx,90
  2060 00000F92 75F6                     jne g3
  2061                                   
  2062 00000F94 B98200                   mov cx,130
  2063 00000F97 BA3200                   mov dx,50
  2064                                   
  2065                                   g4:
  2066 00000F9A CD10                     int 0x10 ; bios video services
  2067 00000F9C 83C201                   add dx,1
  2068 00000F9F 83FA64                   cmp dx,100
  2069 00000FA2 75F6                     jne g4
  2070                                   
  2071                                    
  2072                                   g5:
  2073 00000FA4 CD10                      int 0x10 ; bios video services
  2074 00000FA6 83C101                   add cx,1
  2075 00000FA9 81F99600                 cmp cx,150
  2076 00000FAD 75F5                     jne g5
  2077                                   
  2078                                   g6:
  2079 00000FAF CD10                     int 0x10
  2080 00000FB1 83EA01                   sub dx,1
  2081 00000FB4 83FA32                   cmp dx,50
  2082 00000FB7 75F6                     jne g6
  2083                                   
  2084 00000FB9 B9A000                    mov cx,160
  2085 00000FBC BA3200                   mov dx,50
  2086                                  
  2087                                  g7:
  2088 00000FBF CD10                    int 0x10
  2089 00000FC1 83C201                  add dx,1
  2090 00000FC4 83FA64                  cmp dx,100
  2091 00000FC7 75F6                    jne g7
  2092                                  
  2093 00000FC9 B9A000                    mov cx,160
  2094 00000FCC BA3200                   mov dx,50
  2095                                  
  2096                                  g8:
  2097 00000FCF CD10                    int 0x10
  2098 00000FD1 83C201                  add dx,1
  2099 00000FD4 83C101                  add cx,1
  2100 00000FD7 83FA46                  cmp dx,70
  2101 00000FDA 75F3                    jne g8
  2102                                  
  2103                                  g9:
  2104 00000FDC CD10                    int 0x10
  2105 00000FDE 83EA01                  sub dx,1
  2106 00000FE1 83C101                  add cx,1
  2107 00000FE4 83FA32                  cmp dx,50
  2108 00000FE7 75F3                    jne g9
  2109                                  
  2110                                  g10:
  2111 00000FE9 CD10                    int 0x10
  2112 00000FEB 83C201                  add dx,1
  2113 00000FEE 83FA64                  cmp dx,100
  2114 00000FF1 75F6                    jne g10
  2115                                  
  2116 00000FF3 B9D200                   mov cx,210
  2117 00000FF6 BA3200                   mov dx,50
  2118                                   
  2119                                   g11:
  2120 00000FF9 CD10                     int 0x10
  2121 00000FFB 83C201                   add dx,1
  2122 00000FFE 83FA64                  cmp dx,100
  2123 00001001 75F6                    jne g11
  2124                                  
  2125 00001003 B9D200                   mov cx,210
  2126 00001006 BA3200                   mov dx,50
  2127                                  
  2128                                  g12:
  2129 00001009 CD10                    int 0x10
  2130 0000100B 83C101                  add cx,1
  2131 0000100E 81F9E600                cmp cx,230
  2132 00001012 75F5                    jne g12
  2133                                  
  2134                                  g13:
  2135 00001014 CD10                    int 0x10
  2136 00001016 83C201                  add dx,1
  2137 00001019 83FA46                  cmp dx,70
  2138 0000101C 75F6                    jne g13
  2139                                  
  2140                                  g14:
  2141 0000101E CD10                    int 0x10
  2142 00001020 83E901                  sub cx,1 
  2143 00001023 81F9D200                cmp cx,210
  2144 00001027 75F5                    jne g14
  2145                                  
  2146                                  ;loops to print jump in bright white
  2147                                  
  2148                                  ;**************************************************************************************************
  2149 00001029 B80F0C                  mov ax, 0x0C0f; put pixel in white color
  2150 0000102C 31DB                    xor bx, bx ; page number 0
  2151 0000102E B97800                  mov cx, 120 ; x position 200
  2152 00001031 BA3200                  mov dx, 50 ; y position 200
  2153                                  
  2154                                  
  2155                                  h1:
  2156 00001034 E8B3F0                  call dela
  2157 00001037 CD10                     int 0x10 ; bios video services
  2158 00001039 83C201                   add dx,1
  2159 0000103C 83FA64                   cmp dx,100
  2160 0000103F 75F3                     jne h1
  2161                                   
  2162                                   h2:
  2163 00001041 E8A6F0                   call dela
  2164 00001044 CD10                      int 0x10 ; bios video services
  2165 00001046 83E901                   sub cx,1
  2166 00001049 83F964                   cmp cx,100
  2167 0000104C 75F3                     jne h2
  2168                                   
  2169                                   h3:
  2170 0000104E E899F0                   call dela
  2171 00001051 CD10                     int 0x10
  2172 00001053 83EA01                   sub dx,1
  2173 00001056 83FA5A                   cmp dx,90
  2174 00001059 75F3                     jne h3
  2175                                   
  2176 0000105B B98200                   mov cx,130
  2177 0000105E BA3200                   mov dx,50
  2178                                   
  2179                                   h4:
  2180 00001061 E886F0                   call dela
  2181 00001064 CD10                     int 0x10 ; bios video services
  2182 00001066 83C201                   add dx,1
  2183 00001069 83FA64                   cmp dx,100
  2184 0000106C 75F3                     jne h4
  2185                                   
  2186                                    
  2187                                   h5:
  2188 0000106E E879F0                   call dela
  2189 00001071 CD10                      int 0x10 ; bios video services
  2190 00001073 83C101                   add cx,1
  2191 00001076 81F99600                 cmp cx,150
  2192 0000107A 75F2                     jne h5
  2193                                   
  2194                                   h6:
  2195 0000107C E86BF0                   call dela
  2196 0000107F CD10                     int 0x10
  2197 00001081 83EA01                   sub dx,1
  2198 00001084 83FA32                   cmp dx,50
  2199 00001087 75F3                     jne h6
  2200                                   
  2201 00001089 B9A000                    mov cx,160
  2202 0000108C BA3200                   mov dx,50
  2203                                  
  2204                                  h7:
  2205 0000108F E858F0                  call dela
  2206 00001092 CD10                    int 0x10
  2207 00001094 83C201                  add dx,1
  2208 00001097 83FA64                  cmp dx,100
  2209 0000109A 75F3                    jne h7
  2210                                  
  2211 0000109C B9A000                    mov cx,160
  2212 0000109F BA3200                   mov dx,50
  2213                                  
  2214                                  h8:
  2215 000010A2 E845F0                  call dela
  2216 000010A5 CD10                    int 0x10
  2217 000010A7 83C201                  add dx,1
  2218 000010AA 83C101                  add cx,1
  2219 000010AD 83FA46                  cmp dx,70
  2220 000010B0 75F0                    jne h8
  2221                                  
  2222                                  h9:
  2223 000010B2 E835F0                  call dela
  2224 000010B5 CD10                    int 0x10
  2225 000010B7 83EA01                  sub dx,1
  2226 000010BA 83C101                  add cx,1
  2227 000010BD 83FA32                  cmp dx,50
  2228 000010C0 75F0                    jne h9
  2229                                  
  2230                                  h10:
  2231 000010C2 E825F0                  call dela
  2232 000010C5 CD10                    int 0x10
  2233 000010C7 83C201                  add dx,1
  2234 000010CA 83FA64                  cmp dx,100
  2235 000010CD 75F3                    jne h10
  2236                                  
  2237 000010CF B9D200                   mov cx,210
  2238 000010D2 BA3200                   mov dx,50
  2239                                   
  2240                                   h11:
  2241 000010D5 E812F0                   call dela
  2242 000010D8 CD10                     int 0x10
  2243 000010DA 83C201                   add dx,1
  2244 000010DD 83FA64                  cmp dx,100
  2245 000010E0 75F3                    jne h11
  2246                                  
  2247 000010E2 B9D200                   mov cx,210
  2248 000010E5 BA3200                   mov dx,50
  2249                                  
  2250                                  h12:
  2251 000010E8 E8FFEF                  call dela
  2252 000010EB CD10                    int 0x10
  2253 000010ED 83C101                  add cx,1
  2254 000010F0 81F9E600                cmp cx,230
  2255 000010F4 75F2                    jne h12
  2256                                  
  2257                                  h13:
  2258 000010F6 E8F1EF                  call dela
  2259 000010F9 CD10                    int 0x10
  2260 000010FB 83C201                  add dx,1
  2261 000010FE 83FA46                  cmp dx,70
  2262 00001101 75F3                    jne h13
  2263                                  
  2264                                  h14:
  2265 00001103 E8E4EF                  call dela
  2266 00001106 CD10                    int 0x10
  2267 00001108 83E901                  sub cx,1 
  2268 0000110B 81F9D200                cmp cx,210
  2269 0000110F 75F2                    jne h14
  2270                                  
  2271                                  ;prints 'press enter to proceed'
  2272                                  
  2273                                  ;**************************************************************************************************
  2274 00001111 B413                    mov ah, 0x13		; service 13 - print string
  2275                                  		
  2276 00001113 B001                    		mov al, 1			
  2277 00001115 B700                    		mov bh, 0			; output on page 0
  2278                                  		
  2279 00001117 B30F                    		mov bl, 0x0f;colour
  2280 00001119 B91600                  		mov cx, 22 
  2281 0000111C BA0A0F                  		mov dx, 0x0f0a		; row 15 column 10
  2282                                  		
  2283                                  		;es:bp = ds:message
  2284 0000111F 1E                      		push ds
  2285 00001120 07                      		pop es				; es=ds segment of string
  2286 00001121 BD[0D00]                		mov bp, m1	; bp = offset of string
  2287                                  		
  2288 00001124 CD10                    		INT 0x10
  2289                                  
  2290                                  ;gets character	
  2291 00001126 B400                    mov ah,0
  2292 00001128 CD16                    int 0x16
  2293                                  
  2294                                  ;recolours pixels of jump to pink to match background
  2295                                  ;**************************************************************************************************
  2296 0000112A B8050C                  mov ax, 0x0C05; put pixel in white color
  2297 0000112D 31DB                    xor bx, bx ; page number 0
  2298 0000112F B97800                  mov cx, 120 ; x position 200
  2299 00001132 BA3200                  mov dx, 50 ; y position 200
  2300                                  
  2301                                  
  2302                                  hh1:
  2303 00001135 CD10                     int 0x10 ; bios video services
  2304 00001137 83C201                   add dx,1
  2305 0000113A 83FA64                   cmp dx,100
  2306 0000113D 75F6                     jne hh1
  2307                                   
  2308                                   hh2:
  2309 0000113F CD10                      int 0x10 ; bios video services
  2310 00001141 83E901                   sub cx,1
  2311 00001144 83F964                   cmp cx,100
  2312 00001147 75F6                     jne hh2
  2313                                   
  2314                                   hh3:
  2315 00001149 CD10                     int 0x10
  2316 0000114B 83EA01                   sub dx,1
  2317 0000114E 83FA5A                   cmp dx,90
  2318 00001151 75F6                     jne hh3
  2319                                   
  2320 00001153 B98200                   mov cx,130
  2321 00001156 BA3200                   mov dx,50
  2322                                   
  2323                                   hh4:
  2324 00001159 CD10                     int 0x10 ; bios video services
  2325 0000115B 83C201                   add dx,1
  2326 0000115E 83FA64                   cmp dx,100
  2327 00001161 75F6                     jne hh4
  2328                                   
  2329                                    
  2330                                   hh5:
  2331 00001163 CD10                      int 0x10 ; bios video services
  2332 00001165 83C101                   add cx,1
  2333 00001168 81F99600                 cmp cx,150
  2334 0000116C 75F5                     jne hh5
  2335                                   
  2336                                   hh6:
  2337 0000116E CD10                     int 0x10
  2338 00001170 83EA01                   sub dx,1
  2339 00001173 83FA32                   cmp dx,50
  2340 00001176 75F6                     jne hh6
  2341                                   
  2342 00001178 B9A000                    mov cx,160
  2343 0000117B BA3200                   mov dx,50
  2344                                  
  2345                                  hh7:
  2346 0000117E CD10                    int 0x10
  2347 00001180 83C201                  add dx,1
  2348 00001183 83FA64                  cmp dx,100
  2349 00001186 75F6                    jne hh7
  2350                                  
  2351 00001188 B9A000                    mov cx,160
  2352 0000118B BA3200                   mov dx,50
  2353                                  
  2354                                  hh8:
  2355 0000118E CD10                    int 0x10
  2356 00001190 83C201                  add dx,1
  2357 00001193 83C101                  add cx,1
  2358 00001196 83FA46                  cmp dx,70
  2359 00001199 75F3                    jne hh8
  2360                                  
  2361                                  hh9:
  2362 0000119B CD10                    int 0x10
  2363 0000119D 83EA01                  sub dx,1
  2364 000011A0 83C101                  add cx,1
  2365 000011A3 83FA32                  cmp dx,50
  2366 000011A6 75F3                    jne hh9
  2367                                  
  2368                                  hh10:
  2369 000011A8 CD10                    int 0x10
  2370 000011AA 83C201                  add dx,1
  2371 000011AD 83FA64                  cmp dx,100
  2372 000011B0 75F6                    jne hh10
  2373                                  
  2374 000011B2 B9D200                   mov cx,210
  2375 000011B5 BA3200                   mov dx,50
  2376                                   
  2377                                   hh11:
  2378 000011B8 CD10                     int 0x10
  2379 000011BA 83C201                   add dx,1
  2380 000011BD 83FA64                  cmp dx,100
  2381 000011C0 75F6                    jne hh11
  2382                                  
  2383 000011C2 B9D200                   mov cx,210
  2384 000011C5 BA3200                   mov dx,50
  2385                                  
  2386                                  hh12:
  2387 000011C8 CD10                    int 0x10
  2388 000011CA 83C101                  add cx,1
  2389 000011CD 81F9E600                cmp cx,230
  2390 000011D1 75F5                    jne hh12
  2391                                  
  2392                                  hh13:
  2393 000011D3 CD10                    int 0x10
  2394 000011D5 83C201                  add dx,1
  2395 000011D8 83FA46                  cmp dx,70
  2396 000011DB 75F6                    jne hh13
  2397                                  
  2398                                  hh14:
  2399 000011DD CD10                    int 0x10
  2400 000011DF 83E901                  sub cx,1 
  2401 000011E2 81F9D200                cmp cx,210
  2402 000011E6 75F5                    jne hh14
  2403                                  
  2404                                  ;recolours string to pink to match background
  2405                                  ;**************************************************************************************************
  2406                                  
  2407 000011E8 B413                    mov ah, 0x13		; service 13 - print string
  2408                                  		
  2409 000011EA B001                    		mov al, 1			
  2410 000011EC B700                    		mov bh, 0			; output on page 0
  2411                                  		
  2412 000011EE B305                    		mov bl, 0x05
  2413 000011F0 B91600                  		mov cx, 22 
  2414 000011F3 BA0A0F                  		mov dx, 0x0f0a		; row 15 column 10
  2415                                  		
  2416                                  		;es:bp = ds:message
  2417 000011F6 1E                      		push ds
  2418 000011F7 07                      		pop es				; es=ds segment of string
  2419 000011F8 BD[0D00]                		mov bp, m1	; bp = offset of string
  2420                                  		
  2421 000011FB CD10                    		INT 0x10
  2422                                  		
  2423                                  		
  2424                                  		
  2425 000011FD B400                    	mov ah,0
  2426 000011FF CD16                    	int 0x16
  2427                                  	
  2428                                  ;**************************************************************************************88
  2429 00001201 B413                    	mov ah, 0x13		; service 13 - print string
  2430                                  		
  2431 00001203 B001                    		mov al, 1			
  2432 00001205 B700                    		mov bh, 0			; output on page 0
  2433                                  		
  2434 00001207 B30F                    		mov bl, 0x0f
  2435 00001209 B91600                  		mov cx, 22
  2436 0000120C BA0806                  		mov dx, 0x0608		; row 6 column 8
  2437                                  		
  2438                                  		;es:bp = ds:message
  2439 0000120F 1E                      		push ds
  2440 00001210 07                      		pop es				; es=ds segment of string
  2441 00001211 BD[7100]                		mov bp, inst1	; bp = offset of string
  2442                                  		
  2443 00001214 CD10                    		INT 0x10
  2444                                  		
  2445                                  	
  2446 00001216 B413                    	mov ah, 0x13		; service 13 - print string
  2447                                  		
  2448 00001218 B001                    		mov al, 1			
  2449 0000121A B700                    		mov bh, 0			; output on page 0
  2450                                  		
  2451 0000121C B30F                    		mov bl, 0x0f
  2452 0000121E B91B00                  		mov cx, 27
  2453 00001221 BA0808                  		mov dx, 0x0808	; row 8 column 8
  2454                                  		
  2455                                  		;es:bp = ds:message
  2456 00001224 1E                      		push ds
  2457 00001225 07                      		pop es				; es=ds segment of string
  2458 00001226 BD[8700]                		mov bp, inst2	; bp = offset of string
  2459                                  		
  2460 00001229 CD10                    		INT 0x10
  2461                                  ;**************************************************************************************
  2462 0000122B B413                    		mov ah, 0x13		; service 13 - print string
  2463                                  		
  2464 0000122D B001                    		mov al, 1			
  2465 0000122F B700                    		mov bh, 0			; output on page 0
  2466                                  		
  2467 00001231 B30F                    		mov bl, 0x0f
  2468 00001233 B91C00                  		mov cx, 28
  2469 00001236 BA080A                  		mov dx, 0x0a08	; row 10 column 8
  2470                                  		
  2471                                  		;es:bp = ds:message
  2472 00001239 1E                      		push ds
  2473 0000123A 07                      		pop es				; es=ds segment of string
  2474 0000123B BD[A200]                		mov bp, inst3	; bp = offset of string
  2475                                  		
  2476 0000123E CD10                    		INT 0x10
  2477                                  ;******************************************************************************************
  2478 00001240 B413                    			mov ah, 0x13		; service 13 - print string
  2479                                  		
  2480 00001242 B001                    		mov al, 1			
  2481 00001244 B700                    		mov bh, 0			; output on page 0
  2482                                  		
  2483 00001246 B30A                    		mov bl, 0x0a
  2484 00001248 B91400                  		mov cx, 20 
  2485 0000124B BA0A10                  		mov dx, 0x100a		; row 16 column 10
  2486                                  		
  2487                                  		;es:bp = ds:message
  2488 0000124E 1E                      		push ds
  2489 0000124F 07                      		pop es				; es=ds segment of string
  2490 00001250 BD[BE00]                		mov bp, inst4	; bp = offset of string
  2491                                  		
  2492 00001253 CD10                    		INT 0x10
  2493                                  ;******************************************************************************************		
  2494 00001255 B413                    			mov ah, 0x13		; service 13 - print string
  2495                                  		
  2496 00001257 B001                    		mov al, 1			
  2497 00001259 B700                    		mov bh, 0			; output on page 0
  2498                                  		
  2499 0000125B B30A                    		mov bl, 0x0a
  2500 0000125D B91800                  		mov cx, 24
  2501 00001260 BA0A12                  		mov dx,0x120a	; row 18 column 10
  2502                                  		
  2503                                  		;es:bp = ds:message
  2504 00001263 1E                      		push ds
  2505 00001264 07                      		pop es				; es=ds segment of string
  2506 00001265 BD[D200]                		mov bp, inst5	; bp = offset of string
  2507                                  		
  2508 00001268 CD10                    		INT 0x10
  2509                                  ;******************************************************************************************		
  2510 0000126A B400                    	mov ah,0
  2511 0000126C CD16                    	int 0x16
  2512                                  	
  2513 0000126E B413                    	mov ah, 0x13		; service 13 - print string
  2514                                  		
  2515 00001270 B001                    		mov al, 1			
  2516 00001272 B700                    		mov bh, 0			; output on page 0
  2517                                  		
  2518 00001274 B30A                    		mov bl, 0x0a
  2519 00001276 B91600                  		mov cx, 22
  2520 00001279 BA0806                  		mov dx, 0x0608		; row 10 column 3
  2521                                  		
  2522                                  		;es:bp = ds:message
  2523 0000127C 1E                      		push ds
  2524 0000127D 07                      		pop es				; es=ds segment of string
  2525 0000127E BD[7100]                		mov bp, inst1	; bp = offset of string
  2526                                  		
  2527 00001281 CD10                    		INT 0x10
  2528                                  ;******************************************************************************************			
  2529 00001283 B413                    	mov ah, 0x13		; service 13 - print string
  2530                                  		
  2531 00001285 B001                    		mov al, 1			
  2532 00001287 B700                    		mov bh, 0			; output on page 0
  2533                                  		
  2534 00001289 B30A                    		mov bl, 0x0a
  2535 0000128B B91B00                  		mov cx, 27
  2536 0000128E BA0808                  		mov dx, 0x0808	; row 10 column 3
  2537                                  		
  2538                                  		;es:bp = ds:message
  2539 00001291 1E                      		push ds
  2540 00001292 07                      		pop es				; es=ds segment of string
  2541 00001293 BD[8700]                		mov bp, inst2	; bp = offset of string
  2542                                  		
  2543 00001296 CD10                    		INT 0x10
  2544                                  ;******************************************************************************************		
  2545 00001298 B413                    		mov ah, 0x13		; service 13 - print string
  2546                                  		
  2547 0000129A B001                    		mov al, 1			
  2548 0000129C B700                    		mov bh, 0			; output on page 0
  2549                                  		
  2550 0000129E B30A                    		mov bl, 0x0a
  2551 000012A0 B91C00                  		mov cx, 28
  2552 000012A3 BA080A                  		mov dx, 0x0a08	; row 10 column 3
  2553                                  		
  2554                                  		;es:bp = ds:message
  2555 000012A6 1E                      		push ds
  2556 000012A7 07                      		pop es				; es=ds segment of string
  2557 000012A8 BD[A200]                		mov bp, inst3	; bp = offset of string
  2558                                  		
  2559 000012AB CD10                    		INT 0x10
  2560                                  ;******************************************************************************************
  2561                                  	
  2562                                  ;colours background to pink again for instructions screen	
  2563 000012AD B40B                    mov ah,0bh
  2564 000012AF B700                    mov bh,00h
  2565 000012B1 B305                    mov bl,05h
  2566 000012B3 CD10                    int 0x10
  2567                                  
  2568                                  ;recolours pixels of jump to green to match background
  2569                                  ;**************************************************************************************************
  2570 000012B5 B80A0C                  mov ax, 0x0C0a ; put pixel in green color
  2571 000012B8 31DB                    xor bx, bx ; page number 0
  2572 000012BA B97800                  mov cx, 120 ; x position 200
  2573 000012BD BA3200                  mov dx, 50 ; y position 200
  2574                                  
  2575                                  i1:
  2576 000012C0 CD10                     int 0x10 ; bios video services
  2577 000012C2 83C201                   add dx,1
  2578 000012C5 83FA64                   cmp dx,100
  2579 000012C8 75F6                     jne i1
  2580                                   
  2581                                   i2:
  2582 000012CA CD10                      int 0x10 ; bios video services
  2583 000012CC 83E901                   sub cx,1
  2584 000012CF 83F964                   cmp cx,100
  2585 000012D2 75F6                     jne i2
  2586                                   
  2587                                   i3:
  2588 000012D4 CD10                     int 0x10
  2589 000012D6 83EA01                   sub dx,1
  2590 000012D9 83FA5A                   cmp dx,90
  2591 000012DC 75F6                     jne i3
  2592                                   
  2593 000012DE B98200                   mov cx,130
  2594 000012E1 BA3200                   mov dx,50
  2595                                   
  2596                                   i4:
  2597 000012E4 CD10                     int 0x10 ; bios video services
  2598 000012E6 83C201                   add dx,1
  2599 000012E9 83FA64                   cmp dx,100
  2600 000012EC 75F6                     jne i4
  2601                                   
  2602                                    
  2603                                   i5:
  2604 000012EE CD10                      int 0x10 ; bios video services
  2605 000012F0 83C101                   add cx,1
  2606 000012F3 81F99600                 cmp cx,150
  2607 000012F7 75F5                     jne i5
  2608                                   
  2609                                   i6:
  2610 000012F9 CD10                     int 0x10
  2611 000012FB 83EA01                   sub dx,1
  2612 000012FE 83FA32                   cmp dx,50
  2613 00001301 75F6                     jne i6
  2614                                   
  2615 00001303 B9A000                    mov cx,160
  2616 00001306 BA3200                   mov dx,50
  2617                                  
  2618                                  i7:
  2619 00001309 CD10                    int 0x10
  2620 0000130B 83C201                  add dx,1
  2621 0000130E 83FA64                  cmp dx,100
  2622 00001311 75F6                    jne i7
  2623                                  
  2624 00001313 B9A000                    mov cx,160
  2625 00001316 BA3200                   mov dx,50
  2626                                  
  2627                                  i8:
  2628 00001319 CD10                    int 0x10
  2629 0000131B 83C201                  add dx,1
  2630 0000131E 83C101                  add cx,1
  2631 00001321 83FA46                  cmp dx,70
  2632 00001324 75F3                    jne i8
  2633                                  
  2634                                  i9:
  2635 00001326 CD10                    int 0x10
  2636 00001328 83EA01                  sub dx,1
  2637 0000132B 83C101                  add cx,1
  2638 0000132E 83FA32                  cmp dx,50
  2639 00001331 75F3                    jne i9
  2640                                  
  2641                                  i10:
  2642 00001333 CD10                    int 0x10
  2643 00001335 83C201                  add dx,1
  2644 00001338 83FA64                  cmp dx,100
  2645 0000133B 75F6                    jne i10
  2646                                  
  2647 0000133D B9D200                   mov cx,210
  2648 00001340 BA3200                   mov dx,50
  2649                                   
  2650                                   i11:
  2651 00001343 CD10                     int 0x10
  2652 00001345 83C201                   add dx,1
  2653 00001348 83FA64                  cmp dx,100
  2654 0000134B 75F6                    jne i11
  2655                                  
  2656 0000134D B9D200                   mov cx,210
  2657 00001350 BA3200                   mov dx,50
  2658                                  
  2659                                  i12:
  2660 00001353 CD10                    int 0x10
  2661 00001355 83C101                  add cx,1
  2662 00001358 81F9E600                cmp cx,230
  2663 0000135C 75F5                    jne i12
  2664                                  
  2665                                  i13:
  2666 0000135E CD10                    int 0x10
  2667 00001360 83C201                  add dx,1
  2668 00001363 83FA46                  cmp dx,70
  2669 00001366 75F6                    jne i13
  2670                                  
  2671                                  i14:
  2672 00001368 CD10                    int 0x10
  2673 0000136A 83E901                  sub cx,1 
  2674 0000136D 81F9D200                cmp cx,210
  2675 00001371 75F5                    jne i14	
  2676                                  
  2677                                  ;recolours string to green to match background 
  2678                                  ;**************************************************************************************************
  2679 00001373 B413                    mov ah, 0x13		; service 13 - print string
  2680                                  		
  2681 00001375 B001                    		mov al, 1			
  2682 00001377 B700                    		mov bh, 0			; output on page 0
  2683                                  		
  2684 00001379 B30A                    		mov bl, 0x0a
  2685 0000137B B91600                  		mov cx, 22 
  2686 0000137E BA0A0F                  		mov dx, 0x0f0a		; row 15 column 10
  2687                                  		
  2688                                  		;es:bp = ds:message
  2689 00001381 1E                      		push ds
  2690 00001382 07                      		pop es				; es=ds segment of string
  2691 00001383 BD[0D00]                		mov bp, m1; bp = offset of string
  2692                                  		
  2693 00001386 CD10                    		INT 0x10
  2694                                  
  2695                                  ;colours background green
  2696                                  ;**************************************************************************************************
  2697 00001388 B40B                    mov ah,0bh
  2698 0000138A B700                    mov bh,00h
  2699 0000138C B30A                    mov bl,0ah
  2700 0000138E CD10                    int 0x10
  2701                                  
  2702                                  ;prints loading
  2703                                  ;**************************************************************************************************
  2704 00001390 B413                    mov ah, 0x13		; service 13 - print string
  2705                                  		
  2706 00001392 B001                    		mov al, 1			
  2707 00001394 B700                    		mov bh, 0			; output on page 0
  2708                                  		
  2709 00001396 B30D                    		mov bl, 0x0d
  2710 00001398 B90A00                  		mov cx, 10
  2711 0000139B BA0F0A                  		mov dx, 0x0a0f	; row 10 column 3
  2712                                  		
  2713                                  		;es:bp = ds:message
  2714 0000139E 1E                      		push ds
  2715 0000139F 07                      		pop es				; es=ds segment of string
  2716 000013A0 BD[2300]                		mov bp, m2		; bp = offset of string
  2717                                  		
  2718 000013A3 CD10                    		INT 0x10
  2719                                  
  2720                                  ;colours outline of rectangle for loading screen
  2721                                  ;**************************************************************************************************
  2722 000013A5 B80F0C                  mov ax, 0x0C0f ; put pixel in white color
  2723 000013A8 31DB                    xor bx, bx ; page number 0
  2724 000013AA B96400                  mov cx, 100 ; x position 200
  2725 000013AD BA6400                  mov dx, 100 ; y position 200
  2726                                  
  2727                                  rec1:
  2728 000013B0 CD10                     int 0x10 ; bios video services
  2729 000013B2 83C201                   add dx,1
  2730 000013B5 83FA6E                   cmp dx,110
  2731 000013B8 75F6                     jne rec1
  2732                                   
  2733                                   rec2:
  2734 000013BA CD10                     int 0x10 ; bios video services
  2735 000013BC 83C101                   add cx,1
  2736 000013BF 81F9DC00                 cmp cx,220
  2737 000013C3 75F5                     jne rec2
  2738                                   
  2739                                    rec3:
  2740 000013C5 CD10                     int 0x10 ; bios video services
  2741 000013C7 83EA01                   sub dx,1
  2742 000013CA 83FA64                   cmp dx,100
  2743 000013CD 75F6                     jne rec3
  2744                                   
  2745                                   rec4:
  2746 000013CF CD10                      int 0x10 ; bios video services
  2747 000013D1 83E901                   sub cx,1
  2748 000013D4 83F964                   cmp cx,100
  2749 000013D7 75F6                     jne rec4
  2750                                   
  2751 000013D9 B96400                  mov cx, 100 ; x position 200
  2752 000013DC BA6400                  mov dx, 100 ; y position 200
  2753                                  
  2754                                  ;fills rectangle for loading screen
  2755                                  ot1:
  2756 000013DF 83C101                  add cx,1
  2757 000013E2 BA6400                  mov dx,100
  2758                                   fill1:
  2759 000013E5 CD10                     int 0x10
  2760 000013E7 83C201                   add dx,1
  2761 000013EA 83FA6E                   cmp dx,110
  2762 000013ED 75F6                     jne fill1
  2763 000013EF 81F9C800                 cmp cx,200
  2764 000013F3 750F                     jne hee
  2765                                   ;fakes lag for loading screen for certain column position
  2766 000013F5 E85EF1                   call delay
  2767 000013F8 E85BF1                   call delay
  2768 000013FB E858F1                   call delay
  2769 000013FE E855F1                   call delay
  2770 00001401 E852F1                   call delay
  2771                                   hee:
  2772 00001404 E84FF1                   call delay
  2773 00001407 81F9DC00                 cmp cx,220
  2774 0000140B 75D2                     jne ot1
  2775                                  
  2776 0000140D 5D                      pop bp
  2777 0000140E 61                      popa
  2778 0000140F C3                      ret
  2779                                  ;------------------------------------------------------------------------------------------------------------------------------------------------------------
  2780                                  start:	
  2781                                  ; following code just changes your screen  resolution to 43x132 Mode
  2782 00001410 E849FB                  call startingscreen
  2783 00001413 B400                        mov ah,0x00
  2784 00001415 B054                        mov al, 0x54
  2785 00001417 CD10                        int 0x10
  2786                                  	
  2787 00001419 E8F4F5                  	call printMainScreen
  2788                                  	
  2789 0000141C B401                    	mov ah,0x01
  2790 0000141E CD21                    	int 0x21		
  2791                                  
  2792 00001420 31C0                    	xor ax, ax
  2793 00001422 8EC0                        mov es, ax
  2794                                  	
  2795 00001424 FA                      	cli ;disable interrupts
  2796 00001425 26A12400                    mov ax, [es:9*4]
  2797 00001429 A3[2C03]                    mov [oldisr], ax 
  2798 0000142C 26A12600                    mov ax, [es:9*4+2]
  2799 00001430 A3[2E03]                    mov [oldisr+2], ax 
  2800                                  	
  2801 00001433 26A12000                	mov ax, [es:8*4]
  2802 00001437 A3[0700]                    mov [oldtimer], ax 
  2803 0000143A 26A12200                    mov ax, [es:8*4+2]
  2804 0000143E A3[0900]                    mov [oldtimer+2], ax 
  2805 00001441 FB                          sti;enable interrupts
  2806                                  
  2807 00001442 FA                          cli ;disable interrupts
  2808 00001443 26C7062400[A50E]            mov word [es:9*4], kbisr 
  2809 0000144A 268C0E2600                  mov [es:9*4+2], cs 
  2810                                  	
  2811 0000144F 26C7062000[080F]        	mov word [es:8*4], timer; store offset at n*4
  2812 00001456 268C0E2200                  mov [es:8*4+2], cs ; store segment at n*4+2
  2813 0000145B FB                          sti ;enable interrupts
  2814                                  
  2815 0000145C E82CF5                      call clrscr
  2816                                  	game1:
  2817 0000145F E8AEF5                  	call printMainScreen
  2818 00001462 E875F8                      call print_gameScreen
  2819                                  	
  2820                                      game:
  2821 00001465 E8B5F5                      call platform_animation
  2822 00001468 E82AF6                  	call platform_animation1
  2823 0000146B EBF8                        jmp game
  2824                                  	
  2825                                  end_program:
  2826                                  
  2827 0000146D B400                    mov ah,0
  2828 0000146F CD16                    int 0x16
  2829                                  
  2830                                  ;converting back to text mode
  2831 00001471 B400                        mov ah,0x00
  2832 00001473 B054                        mov al, 0x54
  2833 00001475 CD10                        int 0x10
  2834                                  	
  2835                                  	;unhooking interrupts
  2836 00001477 B80000                  	mov ax,0
  2837 0000147A 8EC0                    	mov es,ax
  2838                                  	
  2839 0000147C FA                      	cli
  2840 0000147D A1[2C03]                	  mov ax,[oldisr]
  2841 00001480 26A32400                	  mov [es:9*4],ax
  2842                                  	  
  2843 00001484 A1[2E03]                	  mov ax,[oldisr+2]
  2844 00001487 26A32600                	  mov [es:9*4+2],ax
  2845                                  		
  2846 0000148B A1[0700]                	   mov ax,[oldtimer]
  2847 0000148E 26A32000                	  mov [es:8*4],ax
  2848                                  	  
  2849 00001492 A1[0900]                	  mov ax,[oldtimer+2]
  2850 00001495 26A32200                	  mov [es:8*4+2],ax
  2851 00001499 FB                      	sti
  2852                                  		
  2853                                  	
  2854                                  	
  2855 0000149A B8004C                   mov ax, 0x4c00 ; terminate 
  2856 0000149D CD21                     int 0x21
